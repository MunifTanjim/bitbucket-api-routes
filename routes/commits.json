[
  {
    "apiName": "Get",
    "consumes": [
      "application/json"
    ],
    "description": "Returns the specified commit.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D#get",
    "method": "GET",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "The commit's SHA1.",
        "in": "path",
        "name": "node",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commit/{node}",
    "responses": {
      "200": {
        "description": "The commit object",
        "schema": {
          "$ref": "#/definitions/commit"
        }
      },
      "404": {
        "description": "If the specified commit or repository does not exist.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "Delete Approval",
    "consumes": [
      "application/json"
    ],
    "description": "Redact the authenticated user's approval of the specified commit.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/approve#delete",
    "method": "DELETE",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "The commit's SHA1.",
        "in": "path",
        "name": "node",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commit/{node}/approve",
    "responses": {
      "204": {
        "description": "An empty response indicating the authenticated user's approval has been withdrawn."
      },
      "404": {
        "description": "If the specified commit, or the repository does not exist.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "Create Approval",
    "consumes": [
      "application/json"
    ],
    "description": "Approve the specified commit as the authenticated user.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/approve#post",
    "method": "POST",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "The commit's SHA1.",
        "in": "path",
        "name": "node",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commit/{node}/approve",
    "responses": {
      "200": {
        "description": "The `participant` object recording that the authenticated user approved the commit.",
        "schema": {
          "$ref": "#/definitions/participant"
        }
      },
      "404": {
        "description": "If the specified commit, or the repository does not exist.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "List Comments",
    "consumes": [
      "application/json"
    ],
    "description": "Returns the commit's comments.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments#get",
    "method": "GET",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "The commit's SHA1.",
        "in": "path",
        "name": "node",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments",
    "responses": {
      "200": {
        "description": "A paginated list of commit comments.",
        "schema": {
          "$ref": "#/definitions/paginated_commit_comments"
        }
      }
    }
  },
  {
    "apiName": "Create Comment",
    "consumes": [
      "application/json"
    ],
    "description": "Creates new comment on the specified commit.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments#post",
    "method": "POST",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      },
      {
        "description": "The specified comment.",
        "in": "body",
        "name": "_body",
        "required": true,
        "schema": {
          "$ref": "#/definitions/commit_comment"
        }
      },
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "The commit's SHA1.",
        "in": "path",
        "name": "node",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments",
    "responses": {
      "201": {
        "description": "The newly created comment.",
        "headers": {
          "Location": {
            "description": "The location of the newly created comment.",
            "type": "string"
          }
        }
      },
      "400": {
        "description": "If the comment was detected as spam, or if the parent comment is not attached to the same node as the new comment"
      },
      "404": {
        "description": "If a parent ID was passed in that cannot be found"
      }
    }
  },
  {
    "apiName": "Get Comment",
    "consumes": [
      "application/json"
    ],
    "description": "Returns the specified commit comment.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments/%7Bcomment_id%7D#get",
    "method": "GET",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "The commit's SHA1.",
        "in": "path",
        "name": "node",
        "required": true,
        "type": "string"
      },
      {
        "description": "The id of the comment.",
        "in": "path",
        "name": "comment_id",
        "required": true,
        "type": "integer"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments/{comment_id}",
    "responses": {
      "200": {
        "description": "The commit comment.",
        "schema": {
          "$ref": "#/definitions/commit_comment"
        }
      }
    }
  },
  {
    "apiName": "List",
    "consumes": [
      "application/json"
    ],
    "description": "These are the repository's commits. They are paginated and returned\nin reverse chronological order, similar to the output of `git log` and\n`hg log`. Like these tools, the DAG can be filtered.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits#get",
    "method": "GET",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "query",
        "name": "include",
        "required": false,
        "type": "string"
      },
      {
        "description": "",
        "in": "query",
        "name": "exclude",
        "required": false,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commits",
    "responses": {
      "default": {
        "description": "Unexpected error.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "Fetch All",
    "consumes": [
      "application/x-www-form-urlencoded"
    ],
    "description": "Identical to `GET /repositories/{username}/{repo_slug}/commits`,\nexcept that POST allows clients to place the include and exclude\nparameters in the request body to avoid URL length issues.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits#post",
    "method": "POST",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "body",
        "name": "include",
        "required": false,
        "type": "string"
      },
      {
        "description": "",
        "in": "body",
        "name": "exclude",
        "required": false,
        "type": "string"
      },
      {
        "description": "",
        "in": "query",
        "name": "q",
        "required": false,
        "type": "string"
      },
      {
        "description": "",
        "in": "query",
        "name": "sort",
        "required": false,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commits",
    "responses": {
      "default": {
        "description": "Unexpected error.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "List For Revision",
    "consumes": [
      "application/json"
    ],
    "description": "These are the repository's commits. They are paginated and returned\nin reverse chronological order, similar to the output of `git log` and\n`hg log`. Like these tools, the DAG can be filtered.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D#get",
    "method": "GET",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "path",
        "name": "revision",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "query",
        "name": "include",
        "required": false,
        "type": "string"
      },
      {
        "description": "",
        "in": "query",
        "name": "exclude",
        "required": false,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commits/{revision}",
    "responses": {
      "default": {
        "description": "Unexpected error.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "Fetch All For Revision",
    "consumes": [
      "application/json"
    ],
    "description": "Identical to `GET /repositories/{username}/{repo_slug}/commits`,\nexcept that POST allows clients to place the include and exclude\nparameters in the request body to avoid URL length issues.",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D#post",
    "method": "POST",
    "parameters": [
      {
        "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "path",
        "name": "revision",
        "required": true,
        "type": "string"
      },
      {
        "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "body",
        "name": "include",
        "required": false,
        "type": "string"
      },
      {
        "description": "",
        "in": "body",
        "name": "exclude",
        "required": false,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/commits/{revision}",
    "responses": {
      "default": {
        "description": "Unexpected error.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "Get Diff",
    "consumes": [
      "application/json"
    ],
    "description": "Produces a raw, git-style diff for either a single commit (diffed\nagainst its first parent), or a revspec of 2 commits (e.g.\n`3a8b42..9ff173` where the first commit represents the source and the\nsecond commit the destination).",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/diff/%7Bspec%7D#get",
    "method": "GET",
    "parameters": [
      {
        "description": "Generate diffs with <n> lines of context instead of the usual three",
        "in": "query",
        "name": "context",
        "required": false,
        "type": "integer"
      },
      {
        "description": "Limit the diff to a particular file (this parameter can be repeated for multiple paths)",
        "in": "query",
        "name": "path",
        "required": false,
        "type": "string"
      },
      {
        "description": "Generate diffs that ignore whitespace",
        "in": "query",
        "name": "ignore_whitespace",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "Generate diffs that include binary files,true if omitted.",
        "in": "query",
        "name": "binary",
        "required": false,
        "type": "boolean"
      },
      {
        "description": "",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "path",
        "name": "spec",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/diff/{spec}",
    "responses": {
      "200": {
        "description": "The raw diff"
      },
      "555": {
        "description": "If the diff was too large and timed out.\n\nSince this endpoint does not employ any form of pagination, but\ninstead returns the diff as a single document, it can run into\ntrouble on very large diffs. If Bitbucket times out in cases\nlike these, a 555 status code is returned.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  },
  {
    "apiName": "Get Patch",
    "consumes": [
      "application/json"
    ],
    "description": "Produces a raw patch for a single commit (diffed against its first\nparent), or a patch-series for a revspec of 2 commits (e.g.\n`3a8b42..9ff173` where the first commit represents the source and the\nsecond commit the destination).",
    "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/patch/%7Bspec%7D#get",
    "method": "GET",
    "parameters": [
      {
        "description": "",
        "in": "path",
        "name": "username",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "path",
        "name": "spec",
        "required": true,
        "type": "string"
      },
      {
        "description": "",
        "in": "path",
        "name": "repo_slug",
        "required": true,
        "type": "string"
      }
    ],
    "path": "/repositories/{username}/{repo_slug}/patch/{spec}",
    "responses": {
      "200": {
        "description": "The raw patches"
      },
      "555": {
        "description": "If the diff was too large and timed out.\n\nSince this endpoint does not employ any form of pagination, but\ninstead returns the diff as a single document, it can run into\ntrouble on very large diffs. If Bitbucket times out in cases\nlike these, a 555 status code is returned.",
        "schema": {
          "$ref": "#/definitions/error"
        }
      }
    }
  }
]
