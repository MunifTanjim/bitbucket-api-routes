{
  "addon": [],
  "hook_events": [
    {
      "apiName": "Get All Subject Types",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook resource or subject types on which webhooks can\nbe registered.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/hook_events#get",
      "method": "GET",
      "parameters": [],
      "path": "/hook_events",
      "responses": {
        "200": {
          "description": "A mapping of resource/subject types pointing to their individual event types.",
          "schema": {
            "$ref": "#/definitions/subject_types"
          }
        }
      }
    },
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all valid webhook events for the\nspecified entity.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/hook_events/%7Bsubject_type%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "A resource or subject type.",
          "enum": [
            "user",
            "repository",
            "team"
          ],
          "in": "path",
          "name": "subject_type",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "subject_type",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/hook_events/{subject_type}",
      "responses": {
        "200": {
          "description": "A paginated list of webhook types available to subscribe on.",
          "schema": {
            "$ref": "#/definitions/paginated_hook_events"
          }
        },
        "404": {
          "description": "If an invalid `{subject_type}` value was specified.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "webhooks": [
    {
      "apiName": "Get All Subject Types",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook resource or subject types on which webhooks can\nbe registered.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/hook_events#get",
      "method": "GET",
      "parameters": [],
      "path": "/hook_events",
      "responses": {
        "200": {
          "description": "A mapping of resource/subject types pointing to their individual event types.",
          "schema": {
            "$ref": "#/definitions/subject_types"
          }
        }
      }
    },
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all valid webhook events for the\nspecified entity.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/hook_events/%7Bsubject_type%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "A resource or subject type.",
          "enum": [
            "user",
            "repository",
            "team"
          ],
          "in": "path",
          "name": "subject_type",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "subject_type",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/hook_events/{subject_type}",
      "responses": {
        "200": {
          "description": "A paginated list of webhook types available to subscribe on.",
          "schema": {
            "$ref": "#/definitions/paginated_hook_events"
          }
        },
        "404": {
          "description": "If an invalid `{subject_type}` value was specified.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List For Repo",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of webhooks installed on this repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks",
      "responses": {
        "200": {
          "description": "The paginated list of installed webhooks.",
          "schema": {
            "$ref": "#/definitions/paginated_webhook_subscriptions"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to access the webhooks.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new webhook on the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks",
      "responses": {
        "201": {
          "description": "If the webhook was registered successfully.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created webhook.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to install webhooks on the specified repository.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified webhook subscription from the given\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks/%7Buid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks/{uid}",
      "responses": {
        "204": {
          "description": "When the webhook was deleted successfully"
        },
        "403": {
          "description": "If the authenticated user does not have permission to delete the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook with the specified id installed on the specified\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks/%7Buid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The installed webhook's id.",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "404": {
          "description": "If the webhook or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the specified webhook subscription.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks/%7Buid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to update the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of webhooks installed on this team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks",
      "responses": {
        "200": {
          "description": "The paginated list of installed webhooks.",
          "schema": {
            "$ref": "#/definitions/paginated_webhook_subscriptions"
          }
        },
        "403": {
          "description": "If the authenticated user is not an admin on the specified team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new webhook on the specified team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks",
      "responses": {
        "201": {
          "description": "The newly installed webhook.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created webhook.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user is not an admin on the specified team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified webhook subscription from the given team\naccount.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks/%7Buid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks/{uid}",
      "responses": {
        "204": {
          "description": "When the webhook was deleted successfully"
        },
        "403": {
          "description": "If the authenticated user does not have permission to delete the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook with the specified id installed on the given\nteam account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks/%7Buid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The installed webhook's id.",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "404": {
          "description": "If the webhook or team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the specified webhook subscription.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks/%7Buid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to update the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List For User",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of webhooks installed on this user account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks",
      "responses": {
        "200": {
          "description": "The paginated list of installed webhooks.",
          "schema": {
            "$ref": "#/definitions/paginated_webhook_subscriptions"
          }
        },
        "403": {
          "description": "If the authenticated user is accessing an account other than their own.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create For User",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new webhook on the specified user account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks",
      "responses": {
        "201": {
          "description": "The newly installed webhook.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created webhook.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user is accessing an account other than their own.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete For User",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified webhook subscription from the given user\naccount.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks/%7Buid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks/{uid}",
      "responses": {
        "204": {
          "description": "When the webhook was deleted successfully"
        },
        "403": {
          "description": "If the authenticated user does not have permission to delete the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or user does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get For User",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook with the specified id installed on the given\nuser account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks/%7Buid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The installed webhook's id.",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "404": {
          "description": "If the webhook or user does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update For User",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the specified webhook subscription.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks/%7Buid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to update the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or user does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "pullrequests": [
    {
      "apiName": "List Default Reviewers",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the repository's default reviewers.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers",
      "responses": {
        "200": {
          "description": "The paginated list of default reviewers"
        }
      }
    },
    {
      "apiName": "Delete Default Reviewer",
      "consumes": [
        "application/json"
      ],
      "description": "Removes a default reviewer from the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers/%7Btarget_username%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. ",
          "in": "path",
          "name": "target_username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers/{target_username}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Default Reviewer",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified reviewer.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers/%7Btarget_username%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. ",
          "in": "path",
          "name": "target_username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers/{target_username}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Add Default Reviewer",
      "consumes": [
        "application/json"
      ],
      "description": "Adds the specified user to the repository's list of default\nreviewers.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers/%7Btarget_username%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. ",
          "in": "path",
          "name": "target_username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers/{target_username}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all pull requests on the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "Only return pull requests that are in this state. This parameter can be repeated.",
          "enum": [
            "MERGED",
            "SUPERSEDED",
            "OPEN",
            "DECLINED"
          ],
          "in": "query",
          "name": "state",
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests",
      "responses": {
        "200": {
          "description": "All pull requests on the specified repository.",
          "schema": {
            "$ref": "#/definitions/paginated_pullrequests"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new pull request where the destination repository is\nthis repository and the author is the authenticated user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The new pull request.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests",
      "responses": {
        "201": {
          "description": "The newly created pull request.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created pull request.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "400": {
          "description": "If the input document was invalid, or if the caller lacks the privilege to create repositories under the targeted account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Activity Log",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's activity log.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/activity#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/activity",
      "responses": {
        "200": {
          "description": "The pull request activity log"
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}",
      "responses": {
        "200": {
          "description": "The pull request object",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository or pull request does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update",
      "consumes": [
        "application/json"
      ],
      "description": "Mutates the specified pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "The pull request that is to be updated.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}",
      "responses": {
        "200": {
          "description": "The updated pull request",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "400": {
          "description": "If the input document was invalid.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or pull request id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Activity Log",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's activity log.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/activity#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/activity",
      "responses": {
        "200": {
          "description": "The pull request activity log"
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Redact the authenticated user's approval of the specified pull\nrequest.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/approve#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve",
      "responses": {
        "204": {
          "description": "An empty response indicating the authenticated user's approval has been withdrawn."
        },
        "404": {
          "description": "The specified pull request or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Approve the specified pull request as the authenticated user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/approve#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve",
      "responses": {
        "200": {
          "description": "The `participant` object recording that the authenticated user approved the pull request.",
          "schema": {
            "$ref": "#/definitions/participant"
          }
        },
        "404": {
          "description": "The specified pull request or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Comments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's comments.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments",
      "responses": {
        "200": {
          "description": "A paginated list of comments made on the given pull request, in reverse chronological order.",
          "schema": {
            "$ref": "#/definitions/paginated_pullrequest_comments"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "The comment object.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments",
      "responses": {
        "201": {
          "description": "The newly created comment.",
          "headers": {
            "Location": {
              "description": "The URL of the new comment",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes a specific pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments/%7Bcomment_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
      "responses": {
        "204": {
          "description": "Successful deletion."
        },
        "403": {
          "description": "If the authenticated user does not have access to delete the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a specific pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments/%7Bcomment_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The comment.",
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Updates a specific pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments/%7Bcomment_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The contents of the updated comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The updated comment.",
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Commits",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's commits.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/commits#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/commits",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Decline",
      "consumes": [
        "application/json"
      ],
      "description": "Declines the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/decline#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/decline",
      "responses": {
        "200": {
          "description": "The pull request object.",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "555": {
          "description": "If the decline took too long and timed out.\nIn this case the caller should retry the request later.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Diff",
      "consumes": [
        "application/json"
      ],
      "description": "Redirects to the [repository diff](../../diff/%7Bspec%7D)\nwith the revspec that corresponds to the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/diff#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diff",
      "responses": {
        "302": {
          "description": "Redirects to the [repository diff](../../diff/%7Bspec%7D) with the\nrevspec that corresponds to the pull request.\n"
        }
      }
    },
    {
      "apiName": "Get Diff Stat",
      "consumes": [
        "application/json"
      ],
      "description": "Redirects to the [repository diffstat](../../diffstat/%7Bspec%7D)\nwith the revspec that corresponds to the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/diffstat#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diffstat",
      "responses": {
        "302": {
          "description": "Redirects to the [repository diffstat](../../diffstat/%7Bspec%7D) with\nthe revspec that corresponds to pull request.\n"
        }
      }
    },
    {
      "apiName": "Merge",
      "consumes": [
        "application/json"
      ],
      "description": "Merges the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/merge#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pullrequest_merge_parameters"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/merge",
      "responses": {
        "200": {
          "description": "The pull request object.",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "555": {
          "description": "If the merge took too long and timed out.\nIn this case the caller should retry the request later",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Patch",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/patch#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/patch",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Statuses",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all statuses (e.g. build results) for the given pull\nrequest.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/statuses#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/statuses",
      "responses": {
        "200": {
          "description": "A paginated list of all commit statuses for this pull request.",
          "schema": {
            "$ref": "#/definitions/paginated_commitstatuses"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository or pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "repositories": [
    {
      "apiName": "List Public",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all public repositories.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Filter the results to include only repositories create on or after this [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)  timestamp. Example: `YYYY-MM-DDTHH:mm:ss.sssZ`",
          "in": "query",
          "name": "after",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories",
      "responses": {
        "200": {
          "description": "All public repositories.",
          "schema": {
            "$ref": "#/definitions/paginated_repositories"
          }
        }
      }
    },
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all repositories owned by the specified\naccount or UUID.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": " Filters the result based on the authenticated user's role on each repository.",
          "enum": [
            "admin",
            "contributor",
            "member",
            "owner"
          ],
          "in": "query",
          "name": "role",
          "required": false,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}",
      "responses": {
        "200": {
          "description": "The repositories owned by the specified account.",
          "schema": {
            "$ref": "#/definitions/paginated_repositories"
          }
        },
        "404": {
          "description": "If the specified account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the repository. This is an irreversible operation.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "If a repository has been moved to a new location, use this parameter to show users a friendly message in the Bitbucket UI that the repository has moved to a new location. However, a GET to this endpoint will still return a 404. ",
          "in": "query",
          "name": "redirect_to",
          "required": false,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}",
      "responses": {
        "204": {
          "description": "Indicates successful deletion."
        },
        "403": {
          "description": "If the caller either does not have admin access to the repository, or the repository is set to read-only.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the object describing this repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "The repository object.",
          "examples": {
            "application/json": {
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "A repository for my bits and bobs",
              "fork_policy": "allow_forks",
              "full_name": "example-username/bits_and_bobs",
              "has_issues": false,
              "has_wiki": false,
              "is_private": true,
              "language": "python",
              "links": {
                "avatar": {
                  "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                },
                "branches": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches"
                },
                "clone": [
                  {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs.git",
                    "name": "https"
                  },
                  {
                    "href": "git@bitbucket.org:example-username/bits_and_bobs.git",
                    "name": "ssh"
                  }
                ],
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits"
                },
                "downloads": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads"
                },
                "forks": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs"
                },
                "pullrequests": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                },
                "source": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src"
                },
                "tags": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags"
                },
                "watchers": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers"
                }
              },
              "mainbranch": {
                "name": "master",
                "type": "branch"
              },
              "name": "bits_and_bobs",
              "owner": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "scm": "git",
              "size": 33348,
              "slug": "bits_and_bobs",
              "type": "repository",
              "updated_on": "2018-06-20T23:17:33.616037+00:00",
              "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}",
              "website": "www.example.com"
            }
          },
          "schema": {
            "$ref": "#/definitions/repository"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have access to it.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If no repository exists at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The repository that is to be created. Note that most object elements are optional. Elements \"owner\" and \"full_name\" are ignored as the URL implies them.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/repository"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "The newly created repository.",
          "examples": {
            "application/json": {
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "A repository for my bits and bobs",
              "fork_policy": "allow_forks",
              "full_name": "example-username/bits_and_bobs",
              "has_issues": false,
              "has_wiki": false,
              "is_private": true,
              "language": "python",
              "links": {
                "avatar": {
                  "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                },
                "branches": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches"
                },
                "clone": [
                  {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs.git",
                    "name": "https"
                  },
                  {
                    "href": "git@bitbucket.org:example-username/bits_and_bobs.git",
                    "name": "ssh"
                  }
                ],
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits"
                },
                "downloads": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads"
                },
                "forks": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs"
                },
                "pullrequests": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                },
                "source": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src"
                },
                "tags": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags"
                },
                "watchers": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers"
                }
              },
              "mainbranch": {
                "name": "master",
                "type": "branch"
              },
              "name": "bits_and_bobs",
              "owner": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "scm": "git",
              "size": 33348,
              "slug": "bits_and_bobs",
              "type": "repository",
              "updated_on": "2018-06-20T23:17:33.616037+00:00",
              "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}",
              "website": "www.example.com"
            }
          },
          "schema": {
            "$ref": "#/definitions/repository"
          }
        },
        "400": {
          "description": "If the input document was invalid, or if the caller lacks the privilege to create repositories under the targeted account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update",
      "consumes": [
        "application/json"
      ],
      "description": "Since this endpoint can be used to both update and to create a\nrepository, the request body depends on the intent.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The repository that is to be updated.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/repository"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "The existing repository has been updated",
          "examples": {
            "application/json": {
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "A repository for my bits and bobs",
              "fork_policy": "allow_forks",
              "full_name": "example-username/bits_and_bobs",
              "has_issues": false,
              "has_wiki": false,
              "is_private": true,
              "language": "python",
              "links": {
                "avatar": {
                  "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                },
                "branches": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches"
                },
                "clone": [
                  {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs.git",
                    "name": "https"
                  },
                  {
                    "href": "git@bitbucket.org:example-username/bits_and_bobs.git",
                    "name": "ssh"
                  }
                ],
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits"
                },
                "downloads": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads"
                },
                "forks": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs"
                },
                "pullrequests": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                },
                "source": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src"
                },
                "tags": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags"
                },
                "watchers": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers"
                }
              },
              "mainbranch": {
                "name": "master",
                "type": "branch"
              },
              "name": "bits_and_bobs",
              "owner": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "scm": "git",
              "size": 33348,
              "slug": "bits_and_bobs",
              "type": "repository",
              "updated_on": "2018-06-20T23:17:33.616037+00:00",
              "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}",
              "website": "www.example.com"
            }
          },
          "headers": {
            "Location": {
              "description": "The location of the repository. This header is only\nprovided when the repository's name is changed.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/repository"
          }
        },
        "201": {
          "description": "A new repository has been created",
          "examples": {
            "application/json": {
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "A repository for my bits and bobs",
              "fork_policy": "allow_forks",
              "full_name": "example-username/bits_and_bobs",
              "has_issues": false,
              "has_wiki": false,
              "is_private": true,
              "language": "python",
              "links": {
                "avatar": {
                  "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                },
                "branches": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches"
                },
                "clone": [
                  {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs.git",
                    "name": "https"
                  },
                  {
                    "href": "git@bitbucket.org:example-username/bits_and_bobs.git",
                    "name": "ssh"
                  }
                ],
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits"
                },
                "downloads": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads"
                },
                "forks": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs"
                },
                "pullrequests": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                },
                "source": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src"
                },
                "tags": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags"
                },
                "watchers": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers"
                }
              },
              "mainbranch": {
                "name": "master",
                "type": "branch"
              },
              "name": "bits_and_bobs",
              "owner": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "scm": "git",
              "size": 33348,
              "slug": "bits_and_bobs",
              "type": "repository",
              "updated_on": "2018-06-20T23:17:33.616037+00:00",
              "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}",
              "website": "www.example.com"
            }
          },
          "headers": {
            "Location": {
              "description": "The location of the newly created repository",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/repository"
          }
        },
        "400": {
          "description": "If the input document was invalid, or if the caller lacks the privilege to create repositories under the targeted account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Branch Restrictions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all branch restrictions on the\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions",
      "responses": {
        "200": {
          "description": "A paginated list of branch restrictions",
          "schema": {
            "$ref": "#/definitions/paginated_branchrestrictions"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Branch Restriction",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new branch restriction rule for a repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new rule",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions",
      "responses": {
        "201": {
          "description": "A paginated list of branch restrictions",
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Branch Restriction",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes an existing branch restriction rule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions/%7Bid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The restriction rule's id",
          "in": "path",
          "name": "id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions/{id}",
      "responses": {
        "204": {
          "description": ""
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or branch restriction id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Branch Restriction",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a specific branch restriction rule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions/%7Bid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The restriction rule's id",
          "in": "path",
          "name": "id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions/{id}",
      "responses": {
        "200": {
          "description": "The branch restriction rule",
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or branch restriction id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Branch Restriction",
      "consumes": [
        "application/json"
      ],
      "description": "Updates an existing branch restriction rule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions/%7Bid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The new version of the existing rule",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The restriction rule's id",
          "in": "path",
          "name": "id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions/{id}",
      "responses": {
        "200": {
          "description": "The updated branch restriction rule",
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or branch restriction id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Commit",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}",
      "responses": {
        "200": {
          "description": "The commit object",
          "schema": {
            "$ref": "#/definitions/commit"
          }
        },
        "404": {
          "description": "If the specified commit or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Commit Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Redact the authenticated user's approval of the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/approve#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/approve",
      "responses": {
        "204": {
          "description": "An empty response indicating the authenticated user's approval has been withdrawn."
        },
        "404": {
          "description": "If the specified commit, or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Commit Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Approve the specified commit as the authenticated user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/approve#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/approve",
      "responses": {
        "200": {
          "description": "The `participant` object recording that the authenticated user approved the commit.",
          "schema": {
            "$ref": "#/definitions/participant"
          }
        },
        "404": {
          "description": "If the specified commit, or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Commit Comments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the commit's comments.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments",
      "responses": {
        "200": {
          "description": "A paginated list of commit comments.",
          "schema": {
            "$ref": "#/definitions/paginated_commit_comments"
          }
        }
      }
    },
    {
      "apiName": "Create Commit Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Creates new comment on the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The specified comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/commit_comment"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments",
      "responses": {
        "201": {
          "description": "The newly created comment.",
          "headers": {
            "Location": {
              "description": "The location of the newly created comment.",
              "type": "string"
            }
          }
        },
        "400": {
          "description": "If the comment was detected as spam, or if the parent comment is not attached to the same node as the new comment"
        },
        "404": {
          "description": "If a parent ID was passed in that cannot be found"
        }
      }
    },
    {
      "apiName": "Get Commit Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified commit comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments/%7Bcomment_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the comment.",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The commit comment.",
          "schema": {
            "$ref": "#/definitions/commit_comment"
          }
        }
      }
    },
    {
      "apiName": "List Commit Statuses",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all statuses (e.g. build results) for a specific commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses",
      "responses": {
        "200": {
          "description": "A paginated list of all commit statuses for this commit.",
          "schema": {
            "$ref": "#/definitions/paginated_commitstatuses"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository or commit does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Commit Build Status",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new build status against the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new commit status object.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build",
      "responses": {
        "201": {
          "description": "The newly created build status object.",
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository, commit, or build status key does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Commit Build Status",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified build status for a commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build/%7Bkey%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "The build status' unique key",
          "in": "path",
          "name": "key",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build/{key}",
      "responses": {
        "200": {
          "description": "The build status object with the specified key.",
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository, commit, or build status key does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Commit Build Status",
      "consumes": [
        "application/json"
      ],
      "description": "Used to update the current status of a build status object on the\nspecific commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build/%7Bkey%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The updated build status object",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "The build status' unique key",
          "in": "path",
          "name": "key",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build/{key}",
      "responses": {
        "200": {
          "description": "The updated build status object.",
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository or build does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Commits",
      "consumes": [
        "application/json"
      ],
      "description": "These are the repository's commits. They are paginated and returned\nin reverse chronological order, similar to the output of `git log` and\n`hg log`. Like these tools, the DAG can be filtered.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "exclude",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Fetch All Commits",
      "consumes": [
        "application/x-www-form-urlencoded"
      ],
      "description": "Identical to `GET /repositories/{username}/{repo_slug}/commits`,\nexcept that POST allows clients to place the include and exclude\nparameters in the request body to avoid URL length issues.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "exclude",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Commits For Revision",
      "consumes": [
        "application/json"
      ],
      "description": "These are the repository's commits. They are paginated and returned\nin reverse chronological order, similar to the output of `git log` and\n`hg log`. Like these tools, the DAG can be filtered.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "exclude",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits/{revision}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Fetch All Commits For Revision",
      "consumes": [
        "application/json"
      ],
      "description": "Identical to `GET /repositories/{username}/{repo_slug}/commits`,\nexcept that POST allows clients to place the include and exclude\nparameters in the request body to avoid URL length issues.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "exclude",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits/{revision}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Components",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the components that have been defined in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/components#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/components",
      "responses": {
        "200": {
          "description": "The components that have been defined in the issue tracker.",
          "schema": {
            "$ref": "#/definitions/paginated_components"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue Component",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue tracker component object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/components/%7Bcomponent_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The component's id",
          "in": "path",
          "name": "component_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/components/{component_id}",
      "responses": {
        "200": {
          "description": "The specified component object.",
          "schema": {
            "$ref": "#/definitions/component"
          }
        },
        "404": {
          "description": "The specified repository or component does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Default Reviewers",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the repository's default reviewers.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers",
      "responses": {
        "200": {
          "description": "The paginated list of default reviewers"
        }
      }
    },
    {
      "apiName": "Delete Default Reviewer",
      "consumes": [
        "application/json"
      ],
      "description": "Removes a default reviewer from the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers/%7Btarget_username%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. ",
          "in": "path",
          "name": "target_username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers/{target_username}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Default Reviewer",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified reviewer.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers/%7Btarget_username%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. ",
          "in": "path",
          "name": "target_username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers/{target_username}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Add Default Reviewer",
      "consumes": [
        "application/json"
      ],
      "description": "Adds the specified user to the repository's list of default\nreviewers.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/default-reviewers/%7Btarget_username%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the default reviewer, surrounded by curly-braces, for example: `{account UUID}`. ",
          "in": "path",
          "name": "target_username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/default-reviewers/{target_username}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Deployments",
      "consumes": [
        "application/json"
      ],
      "description": "Find deployments",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/deployments/#get",
      "method": "GET",
      "operationId": "getDeploymentsForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/deployments/",
      "responses": {
        "200": {
          "description": "The matching deployments.",
          "schema": {
            "$ref": "#/definitions/paginated_deployments"
          }
        }
      }
    },
    {
      "apiName": "Get Deployment",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a deployment",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/deployments/%7Bdeployment_uuid%7D#get",
      "method": "GET",
      "operationId": "getDeploymentForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The deployment UUID.",
          "in": "path",
          "name": "deployment_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/deployments/{deployment_uuid}",
      "responses": {
        "200": {
          "description": "The deployment.",
          "schema": {
            "$ref": "#/definitions/deployment"
          }
        },
        "404": {
          "description": "No account, repository or deployment with the UUID provided exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Diff",
      "consumes": [
        "application/json"
      ],
      "description": "Produces a raw, git-style diff for either a single commit (diffed\nagainst its first parent), or a revspec of 2 commits (e.g.\n`3a8b42..9ff173` where the first commit represents the source and the\nsecond commit the destination).",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/diff/%7Bspec%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Generate diffs with <n> lines of context instead of the usual three",
          "in": "query",
          "name": "context",
          "required": false,
          "type": "integer"
        },
        {
          "description": "Limit the diff to a particular file (this parameter can be repeated for multiple paths)",
          "in": "query",
          "name": "path",
          "required": false,
          "type": "string"
        },
        {
          "description": "Generate diffs that ignore whitespace",
          "in": "query",
          "name": "ignore_whitespace",
          "required": false,
          "type": "boolean"
        },
        {
          "description": "Generate diffs that include binary files,true if omitted.",
          "in": "query",
          "name": "binary",
          "required": false,
          "type": "boolean"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "spec",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/diff/{spec}",
      "responses": {
        "200": {
          "description": "The raw diff"
        },
        "555": {
          "description": "If the diff was too large and timed out.\n\nSince this endpoint does not employ any form of pagination, but\ninstead returns the diff as a single document, it can run into\ntrouble on very large diffs. If Bitbucket times out in cases\nlike these, a 555 status code is returned.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Diff Stats",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the diff stat for the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/diffstat/%7Bspec%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Generate diffs that ignore whitespace",
          "in": "query",
          "name": "ignore_whitespace",
          "required": false,
          "type": "boolean"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "A commit SHA (e.g. `3a8b42`) or a commit range using double dot notation (e.g. `3a8b42..9ff173`). ",
          "in": "path",
          "name": "spec",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "spec",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/diffstat/{spec}",
      "responses": {
        "200": {
          "description": "The diff stats",
          "schema": {
            "$ref": "#/definitions/paginated_diffstats"
          }
        }
      }
    },
    {
      "apiName": "List Downloads",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a list of download links associated with the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Download",
      "consumes": [
        "multipart/form-data"
      ],
      "description": "Upload new download artifacts.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Download",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified download artifact from the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads/%7Bfilename%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "filename",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads/{filename}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Download",
      "consumes": [
        "application/json"
      ],
      "description": "Return a redirect to the contents of a download artifact.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads/%7Bfilename%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "filename",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads/{filename}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Environment",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve an environment",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/environments/%7Benvironment_uuid%7D#get",
      "method": "GET",
      "operationId": "getEnvironmentForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The environment UUID.",
          "in": "path",
          "name": "environment_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/environments/{environment_uuid}",
      "responses": {
        "200": {
          "description": "The environment.",
          "schema": {
            "$ref": "#/definitions/deployment_environment"
          }
        },
        "404": {
          "description": "No account, repository or environment with the UUID provided exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List File History",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of commits that modified the specified file.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/filehistory/%7Bnode%7D/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": " When `true`, Bitbucket will follow the history of the file across renames (this is the default behavior). This can be turned off by specifying `false`.",
          "in": "query",
          "name": "renames",
          "required": false,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property sort the result by as per [filtering and sorting](../../../../../../meta/filtering#query-sort). ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "fields",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/filehistory/{node}/{path}",
      "responses": {
        "200": {
          "description": "A paginated list of commits that modified the specified file",
          "schema": {
            "$ref": "#/definitions/paginated_files"
          }
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Forks",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all the forks of the specified\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/forks#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/forks",
      "responses": {
        "200": {
          "description": "All forks.",
          "schema": {
            "$ref": "#/definitions/paginated_repositories"
          }
        }
      }
    },
    {
      "apiName": "Create Fork",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new fork of the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/forks#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "A repository object. This can be left blank.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/repository"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/forks",
      "responses": {
        "201": {
          "description": "The newly created fork.",
          "examples": {
            "application/json": {
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "A repository for my bits and bobs",
              "fork_policy": "allow_forks",
              "full_name": "example-username/bits_and_bobs",
              "has_issues": false,
              "has_wiki": false,
              "is_private": true,
              "language": "python",
              "links": {
                "avatar": {
                  "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                },
                "branches": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches"
                },
                "clone": [
                  {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs.git",
                    "name": "https"
                  },
                  {
                    "href": "git@bitbucket.org:example-username/bits_and_bobs.git",
                    "name": "ssh"
                  }
                ],
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits"
                },
                "downloads": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/downloads"
                },
                "forks": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/forks"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs"
                },
                "pullrequests": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                },
                "source": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/src"
                },
                "tags": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/tags"
                },
                "watchers": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/watchers"
                }
              },
              "mainbranch": {
                "name": "master",
                "type": "branch"
              },
              "name": "bits_and_bobs",
              "owner": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "scm": "git",
              "size": 33348,
              "slug": "bits_and_bobs",
              "type": "repository",
              "updated_on": "2018-06-20T23:17:33.616037+00:00",
              "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}",
              "website": "www.example.com"
            }
          },
          "headers": {
            "Location": {
              "description": "The URL of the newly created fork",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/repository"
          }
        }
      }
    },
    {
      "apiName": "List Webhooks",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of webhooks installed on this repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks",
      "responses": {
        "200": {
          "description": "The paginated list of installed webhooks.",
          "schema": {
            "$ref": "#/definitions/paginated_webhook_subscriptions"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to access the webhooks.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new webhook on the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks",
      "responses": {
        "201": {
          "description": "If the webhook was registered successfully.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created webhook.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to install webhooks on the specified repository.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified webhook subscription from the given\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks/%7Buid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks/{uid}",
      "responses": {
        "204": {
          "description": "When the webhook was deleted successfully"
        },
        "403": {
          "description": "If the authenticated user does not have permission to delete the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook with the specified id installed on the specified\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks/%7Buid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The installed webhook's id.",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "404": {
          "description": "If the webhook or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the specified webhook subscription.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/hooks/%7Buid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to update the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Issues",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the issues in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues",
      "responses": {
        "200": {
          "description": "A paginated list of the issues matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_issues"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Issue",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new issue. The only required element is `title`. All other elements can be omitted from the body.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues",
      "responses": {
        "201": {
          "description": "The newly created issue.",
          "headers": {
            "Location": {
              "description": "The (absolute) URL of the newly created issue.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to create the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Issue",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified issue. This requires write access to the\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}",
      "responses": {
        "200": {
          "description": "The issue object.",
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to delete the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}",
      "responses": {
        "200": {
          "description": "The issue object.",
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to access the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Issue",
      "consumes": [
        "application/json"
      ],
      "description": "Modifies the issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}",
      "responses": {
        "200": {
          "description": "The updated issue object.",
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to access the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Issue Attachments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all attachments for this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The issue's id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments",
      "responses": {
        "200": {
          "description": "A paginated list of all attachments for this issue.",
          "schema": {
            "$ref": "#/definitions/paginated_issue_attachments"
          }
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Issue Attachments",
      "consumes": [
        "multipart/form-data"
      ],
      "description": "Upload new issue attachments.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The issue's id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments",
      "responses": {
        "201": {
          "description": "An empty response document.",
          "headers": {
            "Location": {
              "description": "The URL to the issue's collection of attachments.",
              "type": "string"
            }
          }
        },
        "400": {
          "description": "If no files were uploaded, or if the wrong `Content-Type` was used."
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Issue Attachment",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes an attachment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments/%7Bpath%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments/{path}",
      "responses": {
        "204": {
          "description": "Indicates that the deletion was successful"
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue Attachment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the contents of the specified file attachment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments/{path}",
      "responses": {
        "302": {
          "description": "A redirect to the file's contents",
          "headers": {
            "Location": {
              "type": "string"
            }
          }
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Issue Changes",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the list of all changes that have been made to the specified\nissue. Changes are returned in chronological order with the oldest\nchange first.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/changes#get",
      "method": "GET",
      "parameters": [
        {
          "description": " Query string to narrow down the response. See [filtering and sorting](../../../meta/filtering) for details.",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property to sort results. See [filtering and sorting](../../../meta/filtering#query-sort) for details. ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/changes",
      "responses": {
        "200": {
          "description": "Returns all the issue changes that were made on the specified issue.",
          "schema": {
            "$ref": "#/definitions/paginated_log_entries"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Issue Change",
      "consumes": [
        "application/json"
      ],
      "description": "Makes a change to the specified issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/changes#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new issue state change. The only required elements are `changes.[].new`. All other elements can be omitted from the body.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_change"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/changes",
      "responses": {
        "201": {
          "description": "The newly created issue change.",
          "headers": {
            "Location": {
              "description": "The (absolute) URL of the newly created issue change.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/issue_change"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to modify the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue Change",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue change object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/changes/%7Bchange_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue change id",
          "in": "path",
          "name": "change_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/changes/{change_id}",
      "responses": {
        "200": {
          "description": "The specified issue change object.",
          "schema": {
            "$ref": "#/definitions/issue_change"
          }
        },
        "404": {
          "description": "The specified repository or issue change does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Issue Comments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all comments that were made on the\nspecified issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments",
      "responses": {
        "200": {
          "description": "A paginated list of issue comments.",
          "schema": {
            "$ref": "#/definitions/paginated_issue_comments"
          }
        }
      }
    },
    {
      "apiName": "Create Issue Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new issue comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The new issue comment object.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments",
      "responses": {
        "201": {
          "description": "The newly created comment.",
          "headers": {
            "Location": {
              "description": "The location of the newly issue comment.",
              "type": "string"
            }
          }
        },
        "400": {
          "description": "If the input was invalid, or if the comment being created is detected as spam ",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Issue Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The ID of the issue that is being queried. ",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}",
      "responses": {
        "204": {
          "description": "Indicates successful deletion."
        }
      }
    },
    {
      "apiName": "Get Issue Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue comment object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The ID of the issue that is being queried. ",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The issue comment.",
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        }
      }
    },
    {
      "apiName": "Update Issue Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the content of the specified issue comment. Note that only\nthe `content.raw` field can be modified.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The ID of the issue that is being queried. ",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The updated issue comment.",
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        "400": {
          "description": "If the input was invalid, or if the update to the comment is detected as spam ",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Issue Vote",
      "consumes": [
        "application/json"
      ],
      "description": "Retract your vote.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/vote#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/vote",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue Vote",
      "consumes": [
        "application/json"
      ],
      "description": "Check whether the authenticated user has voted for this issue.\nA 204 status code indicates that the user has voted, while a 404\nimplies they haven't.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/vote#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/vote",
      "responses": {
        "204": {
          "description": "If the authenticated user has not voted for this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the authenticated user has not voted for this issue, or when the repo does not exist, or does not have an issue tracker.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Issue Vote",
      "consumes": [
        "application/json"
      ],
      "description": "Vote for this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/vote#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/vote",
      "responses": {
        "204": {
          "description": "Indicating the authenticated user has cast their vote successfully.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Issue Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Stop watching this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/watch#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/watch",
      "responses": {
        "204": {
          "description": "Indicates that the authenticated user successfully stopped watching this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Indicated whether or not the authenticated user is watching this\nissue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/watch#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/watch",
      "responses": {
        "204": {
          "description": "If the authenticated user is watching this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the authenticated user is not watching this issue, or when the repo does not exist, or does not have an issue tracker.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Issue Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Start watching this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/watch#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/watch",
      "responses": {
        "204": {
          "description": "Indicates that the authenticated user successfully started watching this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the authenticated user is not watching this issue, or when the repo does not exist, or does not have an issue tracker.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Milestones",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the milestones that have been defined in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/milestones#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/milestones",
      "responses": {
        "200": {
          "description": "The milestones that have been defined in the issue tracker.",
          "schema": {
            "$ref": "#/definitions/paginated_milestones"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue Milestone",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue tracker milestone object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/milestones/%7Bmilestone_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The milestone's id",
          "in": "path",
          "name": "milestone_id",
          "required": true,
          "type": "integer"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/milestones/{milestone_id}",
      "responses": {
        "200": {
          "description": "The specified milestone object.",
          "schema": {
            "$ref": "#/definitions/milestone"
          }
        },
        "404": {
          "description": "The specified repository or milestone does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Patch",
      "consumes": [
        "application/json"
      ],
      "description": "Produces a raw patch for a single commit (diffed against its first\nparent), or a patch-series for a revspec of 2 commits (e.g.\n`3a8b42..9ff173` where the first commit represents the source and the\nsecond commit the destination).",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/patch/%7Bspec%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "spec",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/patch/{spec}",
      "responses": {
        "200": {
          "description": "The raw patches"
        },
        "555": {
          "description": "If the diff was too large and timed out.\n\nSince this endpoint does not employ any form of pagination, but\ninstead returns the diff as a single document, it can run into\ntrouble on very large diffs. If Bitbucket times out in cases\nlike these, a 555 status code is returned.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipelines",
      "consumes": [
        "application/json"
      ],
      "description": "Find pipelines",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/#get",
      "method": "GET",
      "operationId": "getPipelinesForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/",
      "responses": {
        "200": {
          "description": "The matching pipelines.",
          "schema": {
            "$ref": "#/definitions/paginated_pipelines"
          }
        }
      }
    },
    {
      "apiName": "Create Pipeline",
      "consumes": [
        "application/json"
      ],
      "description": "Endpoint to create and initiate a pipeline. \nThere are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated.\n# Trigger a Pipeline for a branch\nOne way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. \nThe specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/#post",
      "method": "POST",
      "operationId": "createPipelineForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The pipeline to initiate.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/",
      "responses": {
        "201": {
          "description": "The initiated pipeline.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline"
          }
        },
        "400": {
          "description": "The account or repository is not enabled, the yml file does not exist in the repository for the given revision, or the request body contained invalid properties.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a specified pipeline",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The pipeline UUID.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}",
      "responses": {
        "200": {
          "description": "The pipeline.",
          "schema": {
            "$ref": "#/definitions/pipeline"
          }
        },
        "404": {
          "description": "No account, repository or pipeline with the UUID provided exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipeline Steps",
      "consumes": [
        "application/json"
      ],
      "description": "Find steps for the given pipeline.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/steps/#get",
      "method": "GET",
      "operationId": "getPipelineStepsForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/steps/",
      "responses": {
        "200": {
          "description": "The steps.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_steps"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Step",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a given step of a pipeline.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/steps/%7Bstep_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineStepForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the step.",
          "in": "path",
          "name": "step_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}",
      "responses": {
        "200": {
          "description": "The step.",
          "schema": {
            "$ref": "#/definitions/pipeline_step"
          }
        },
        "404": {
          "description": "No account, repository, pipeline or step with the UUID provided exists for the pipeline with the UUID provided.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Step Log",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the log file for a given step of a pipeline.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/steps/%7Bstep_uuid%7D/log#get",
      "method": "GET",
      "operationId": "getPipelineStepLogForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the step.",
          "in": "path",
          "name": "step_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log",
      "produces": [
        "application/octet-stream"
      ],
      "responses": {
        "200": {
          "description": "The raw log file for this pipeline step."
        },
        "304": {
          "description": "The log has the same etag as the provided If-None-Match header.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A pipeline with the given UUID does not exist, a step with the given UUID does not exist in the pipeline or a log file does not exist for the given step.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "416": {
          "description": "The requested range does not exist for requests that specified the [HTTP Range header](https://tools.ietf.org/html/rfc7233#section-3.1).",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Stop Pipeline",
      "consumes": [
        "application/json"
      ],
      "description": "Signal the stop of a pipeline and all of its steps that not have completed yet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/stopPipeline#post",
      "method": "POST",
      "operationId": "stopPipeline",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline",
      "responses": {
        "204": {
          "description": "The pipeline has been signaled to stop."
        },
        "400": {
          "description": "The specified pipeline has already completed.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "Either the account, repository or pipeline with the given UUID does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Config",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the repository pipelines configuration.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineConfig",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config",
      "responses": {
        "200": {
          "description": "The repository pipelines configuration.",
          "schema": {
            "$ref": "#/definitions/pipelines_config"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Config",
      "consumes": [
        "application/json"
      ],
      "description": "Update the pipelines configuration for a repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineConfig",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated repository pipelines configuration.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipelines_config"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config",
      "responses": {
        "200": {
          "description": "The repository pipelines configuration was updated.",
          "schema": {
            "$ref": "#/definitions/pipelines_config"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Build Number",
      "consumes": [
        "application/json"
      ],
      "description": "Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/build_number#put",
      "method": "PUT",
      "operationId": "updateRepositoryBuildNumber",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The build number to update.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_build_number"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/build_number",
      "responses": {
        "200": {
          "description": "The build number has been configured.",
          "schema": {
            "$ref": "#/definitions/pipeline_build_number"
          }
        },
        "400": {
          "description": "The update failed because the next number was invalid (it should be higher than the current number).",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipeline Schedules",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the configured schedules for the given repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineSchedules",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/",
      "responses": {
        "200": {
          "description": "The list of schedules.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_schedules"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Pipeline Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Create a schedule for the given repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/#post",
      "method": "POST",
      "operationId": "createRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The schedule to create.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/",
      "responses": {
        "201": {
          "description": "The created schedule.",
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        },
        "400": {
          "description": "There were errors validating the request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "The maximum limit of schedules for this repository was reached.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pipeline Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a schedule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The uuid of the schedule.",
          "in": "path",
          "name": "schedule_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
      "responses": {
        "204": {
          "description": "The schedule was deleted."
        },
        "404": {
          "description": "The account, repository or schedule was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a schedule by its UUID.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The uuid of the schedule.",
          "in": "path",
          "name": "schedule_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
      "responses": {
        "200": {
          "description": "The requested schedule.",
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        },
        "404": {
          "description": "The account, repository or schedule was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Update a schedule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The uuid of the schedule.",
          "in": "path",
          "name": "schedule_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The schedule to update.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
      "responses": {
        "200": {
          "description": "The schedule is updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        },
        "404": {
          "description": "The account, repository or schedule was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipeline Schedule Executions",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the executions of a given schedule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D/executions/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineScheduleExecutions",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions/",
      "responses": {
        "200": {
          "description": "The list of executions of a schedule.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_schedule_executions"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pipeline Ssh Key Pair",
      "consumes": [
        "application/json"
      ],
      "description": "Delete the repository SSH key pair.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/key_pair#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineKeyPair",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/key_pair",
      "responses": {
        "204": {
          "description": "The SSH key pair was deleted."
        },
        "404": {
          "description": "The account, repository or SSH key pair was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Ssh Key Pair",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/key_pair#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineSshKeyPair",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/key_pair",
      "responses": {
        "200": {
          "description": "The SSH key pair.",
          "schema": {
            "$ref": "#/definitions/pipeline_ssh_key_pair"
          }
        },
        "404": {
          "description": "The account, repository or SSH key pair was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Ssh Key Pair",
      "consumes": [
        "application/json"
      ],
      "description": "Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/key_pair#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineKeyPair",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The created or updated SSH key pair.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_ssh_key_pair"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/key_pair",
      "responses": {
        "200": {
          "description": "The SSH key pair was created or updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_ssh_key_pair"
          }
        },
        "404": {
          "description": "The account, repository or SSH key pair was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipeline Known Hosts",
      "consumes": [
        "application/json"
      ],
      "description": "Find repository level known hosts.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineKnownHosts",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/",
      "responses": {
        "200": {
          "description": "The retrieved known hosts.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_known_hosts"
          }
        }
      }
    },
    {
      "apiName": "Create Pipeline Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Create a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/#post",
      "method": "POST",
      "operationId": "createRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The known host to create.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/",
      "responses": {
        "201": {
          "description": "The known host was created.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline known host.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        },
        "404": {
          "description": "The account or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A known host with the provided hostname already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pipeline Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/%7Bknown_host_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the known host to delete.",
          "in": "path",
          "name": "known_host_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
      "responses": {
        "204": {
          "description": "The known host was deleted."
        },
        "404": {
          "description": "The account, repository or known host with given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/%7Bknown_host_uuid%7D#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the known host to retrieve.",
          "in": "path",
          "name": "known_host_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
      "responses": {
        "200": {
          "description": "The known host.",
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        },
        "404": {
          "description": "The account, repository or known host with the specified UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Update a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/%7Bknown_host_uuid%7D#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the known host to update.",
          "in": "path",
          "name": "known_host_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated known host.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
      "responses": {
        "200": {
          "description": "The known host was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        },
        "404": {
          "description": "The account, repository or known host with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipeline Variables",
      "consumes": [
        "application/json"
      ],
      "description": "Find repository level variables.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineVariables",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/",
      "responses": {
        "200": {
          "description": "The retrieved variables.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_variables"
          }
        }
      }
    },
    {
      "apiName": "Create Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Create a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/#post",
      "method": "POST",
      "operationId": "createRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The variable to create.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/",
      "responses": {
        "201": {
          "description": "The variable was created.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline variable.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A variable with the provided key already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/%7Bvariable_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to delete.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "204": {
          "description": "The variable was deleted."
        },
        "404": {
          "description": "The account, repository or variable with given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/%7Bvariable_uuid%7D#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to retrieve.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account, repository or variable with the specified UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Update a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/%7Bvariable_uuid%7D#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to update.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated variable",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account, repository or variable with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pull Requests",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all pull requests on the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "Only return pull requests that are in this state. This parameter can be repeated.",
          "enum": [
            "MERGED",
            "SUPERSEDED",
            "OPEN",
            "DECLINED"
          ],
          "in": "query",
          "name": "state",
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests",
      "responses": {
        "200": {
          "description": "All pull requests on the specified repository.",
          "schema": {
            "$ref": "#/definitions/paginated_pullrequests"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Pull Request",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new pull request where the destination repository is\nthis repository and the author is the authenticated user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The new pull request.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests",
      "responses": {
        "201": {
          "description": "The newly created pull request.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created pull request.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "400": {
          "description": "If the input document was invalid, or if the caller lacks the privilege to create repositories under the targeted account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pull Requests Activity Log",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's activity log.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/activity#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/activity",
      "responses": {
        "200": {
          "description": "The pull request activity log"
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pull Request",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}",
      "responses": {
        "200": {
          "description": "The pull request object",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository or pull request does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pull Request",
      "consumes": [
        "application/json"
      ],
      "description": "Mutates the specified pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "The pull request that is to be updated.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}",
      "responses": {
        "200": {
          "description": "The updated pull request",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "400": {
          "description": "If the input document was invalid.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or pull request id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pull Request Activity Log",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's activity log.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/activity#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/activity",
      "responses": {
        "200": {
          "description": "The pull request activity log"
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pull Request Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Redact the authenticated user's approval of the specified pull\nrequest.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/approve#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve",
      "responses": {
        "204": {
          "description": "An empty response indicating the authenticated user's approval has been withdrawn."
        },
        "404": {
          "description": "The specified pull request or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Pull Request Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Approve the specified pull request as the authenticated user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/approve#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/approve",
      "responses": {
        "200": {
          "description": "The `participant` object recording that the authenticated user approved the pull request.",
          "schema": {
            "$ref": "#/definitions/participant"
          }
        },
        "404": {
          "description": "The specified pull request or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pull Request Comments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's comments.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments",
      "responses": {
        "200": {
          "description": "A paginated list of comments made on the given pull request, in reverse chronological order.",
          "schema": {
            "$ref": "#/definitions/paginated_pullrequest_comments"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Pull Request Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "The comment object.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments",
      "responses": {
        "201": {
          "description": "The newly created comment.",
          "headers": {
            "Location": {
              "description": "The URL of the new comment",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pull Request Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes a specific pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments/%7Bcomment_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
      "responses": {
        "204": {
          "description": "Successful deletion."
        },
        "403": {
          "description": "If the authenticated user does not have access to delete the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pull Request Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a specific pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments/%7Bcomment_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The comment.",
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pull Request Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Updates a specific pull request comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/comments/%7Bcomment_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The contents of the updated comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The updated comment.",
          "schema": {
            "$ref": "#/definitions/pullrequest_comment"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the pull request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pull Request Commits",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the pull request's commits.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/commits#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/commits",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Decline Pull Request",
      "consumes": [
        "application/json"
      ],
      "description": "Declines the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/decline#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/decline",
      "responses": {
        "200": {
          "description": "The pull request object.",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "555": {
          "description": "If the decline took too long and timed out.\nIn this case the caller should retry the request later.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pull Request Diff",
      "consumes": [
        "application/json"
      ],
      "description": "Redirects to the [repository diff](../../diff/%7Bspec%7D)\nwith the revspec that corresponds to the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/diff#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diff",
      "responses": {
        "302": {
          "description": "Redirects to the [repository diff](../../diff/%7Bspec%7D) with the\nrevspec that corresponds to the pull request.\n"
        }
      }
    },
    {
      "apiName": "Get Pull Request Diff Stat",
      "consumes": [
        "application/json"
      ],
      "description": "Redirects to the [repository diffstat](../../diffstat/%7Bspec%7D)\nwith the revspec that corresponds to the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/diffstat#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/diffstat",
      "responses": {
        "302": {
          "description": "Redirects to the [repository diffstat](../../diffstat/%7Bspec%7D) with\nthe revspec that corresponds to pull request.\n"
        }
      }
    },
    {
      "apiName": "Merge Pull Request",
      "consumes": [
        "application/json"
      ],
      "description": "Merges the pull request.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/merge#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pullrequest_merge_parameters"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/merge",
      "responses": {
        "200": {
          "description": "The pull request object.",
          "examples": {
            "application/json": {
              "author": {
                "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                "display_name": "Example Username",
                "links": {
                  "avatar": {
                    "href": "https://bitbucket.org/account/example-username/avatar/"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/users/example-username"
                  }
                },
                "nickname": "example-username",
                "type": "user",
                "username": "example-username",
                "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
              },
              "close_source_branch": true,
              "closed_by": null,
              "comment_count": 0,
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "description": "Everything is awesome!",
              "destination": {
                "branch": {
                  "name": "master"
                },
                "commit": {
                  "hash": "230269fdfabd",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabd"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabd"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "id": 1,
              "links": {
                "activity": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/activity"
                },
                "approve": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/approve"
                },
                "comments": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/comments"
                },
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/commits"
                },
                "decline": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/decline"
                },
                "diff": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/diff"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/pull-requests/1"
                },
                "merge": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/merge"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1"
                },
                "statuses": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/pullrequests/1/statuses"
                }
              },
              "merge_commit": null,
              "participants": [],
              "reason": "",
              "reviewers": [],
              "source": {
                "branch": {
                  "name": "branch_magnificent_internet"
                },
                "commit": {
                  "hash": "c184aab5708b",
                  "links": {
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/c184aab5708b"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/c184aab5708b"
                    }
                  },
                  "type": "commit"
                },
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                }
              },
              "state": "OPEN",
              "summary": {
                "html": "<p>Everything is awesome!</p>",
                "markup": "markdown",
                "raw": "Everything is awesome!",
                "type": "rendered"
              },
              "task_count": 0,
              "title": "Change a cooperative standard to a smiling disease",
              "type": "pullrequest",
              "updated_on": "2018-06-20T23:17:33.616037+00:00"
            }
          },
          "schema": {
            "$ref": "#/definitions/pullrequest"
          }
        },
        "555": {
          "description": "If the merge took too long and timed out.\nIn this case the caller should retry the request later",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pull Request Patch",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/patch#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/patch",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pull Request Statuses",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all statuses (e.g. build results) for the given pull\nrequest.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/statuses#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/statuses",
      "responses": {
        "200": {
          "description": "A paginated list of all commit statuses for this pull request.",
          "schema": {
            "$ref": "#/definitions/paginated_commitstatuses"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository or pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Refs",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the branches and tags in the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs#get",
      "method": "GET",
      "parameters": [
        {
          "description": " This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "type": "string"
        },
        {
          "description": " Field by which the results should be sorted as per [filtering and sorting](../../../../../../meta/filtering). The `name` field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return ['1.1', '1.2', '1.10'] instead of ['1.1', '1.10', '1.2'].",
          "in": "query",
          "name": "sort",
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs",
      "responses": {
        "200": {
          "description": "A paginated list of refs matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_refs"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Branches",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a list of all open branches within the specified repository.\nResults will be in the order the source control manager returns them.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches#get",
      "method": "GET",
      "parameters": [
        {
          "description": " This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "type": "string"
        },
        {
          "description": " Field by which the results should be sorted as per [filtering and sorting](../../../../../../meta/filtering). The `name` field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return ['branch1', 'branch2', 'branch10'] instead of ['branch1', 'branch10', 'branch2'].",
          "in": "query",
          "name": "sort",
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches",
      "responses": {
        "200": {
          "description": "A paginated list of branches matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_branches"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Branch",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new branch in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches",
      "responses": {
        "201": {
          "description": "The newly created branch object.",
          "examples": {
            "application/json": {
              "links": {
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits/master"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/branch/master"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches/master"
                }
              },
              "name": "master",
              "target": {
                "author": {
                  "raw": "Example Username <brian_stamm@gmail.com>",
                  "type": "author",
                  "user": {
                    "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                    "display_name": "Example Username",
                    "links": {
                      "avatar": {
                        "href": "https://bitbucket.org/account/example-username/avatar/"
                      },
                      "html": {
                        "href": "https://bitbucket.org/example-username/"
                      },
                      "self": {
                        "href": "https://api.bitbucket.org/2.0/users/example-username"
                      }
                    },
                    "nickname": "example-username",
                    "type": "user",
                    "username": "example-username",
                    "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
                  }
                },
                "date": "2018-06-20T23:17:33+00:00",
                "hash": "230269fdfabdb5562a991f351b5dd6425de232d2",
                "links": {
                  "approve": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/approve"
                  },
                  "comments": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/comments"
                  },
                  "diff": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/diff/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "patch": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/patch/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "statuses": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/statuses"
                  }
                },
                "message": "Kickass commit message!",
                "parents": [],
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                },
                "type": "commit"
              },
              "type": "branch"
            }
          },
          "schema": {
            "$ref": "#/definitions/branch"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or branch does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Branch",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a branch in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches/%7Bname%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the branch.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches/{name}",
      "responses": {
        "204": {
          "description": "Indicates that the specified branch was successfully deleted."
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or branch does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Branch",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a branch object within the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches/%7Bname%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the branch.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches/{name}",
      "responses": {
        "200": {
          "description": "The branch object.",
          "examples": {
            "application/json": {
              "links": {
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits/master"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/branch/master"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches/master"
                }
              },
              "name": "master",
              "target": {
                "author": {
                  "raw": "Example Username <brian_stamm@gmail.com>",
                  "type": "author",
                  "user": {
                    "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                    "display_name": "Example Username",
                    "links": {
                      "avatar": {
                        "href": "https://bitbucket.org/account/example-username/avatar/"
                      },
                      "html": {
                        "href": "https://bitbucket.org/example-username/"
                      },
                      "self": {
                        "href": "https://api.bitbucket.org/2.0/users/example-username"
                      }
                    },
                    "nickname": "example-username",
                    "type": "user",
                    "username": "example-username",
                    "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
                  }
                },
                "date": "2018-06-20T23:17:33+00:00",
                "hash": "230269fdfabdb5562a991f351b5dd6425de232d2",
                "links": {
                  "approve": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/approve"
                  },
                  "comments": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/comments"
                  },
                  "diff": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/diff/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "patch": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/patch/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "statuses": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/statuses"
                  }
                },
                "message": "Kickass commit message!",
                "parents": [],
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                },
                "type": "commit"
              },
              "type": "branch"
            }
          },
          "schema": {
            "$ref": "#/definitions/branch"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or branch does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Tags",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the tags in the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags#get",
      "method": "GET",
      "parameters": [
        {
          "description": " This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "type": "string"
        },
        {
          "description": " Field by which the results should be sorted as per [filtering and sorting](../../../../../../meta/filtering). The `name` field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return ['1.1', '1.2', '1.10'] instead of ['1.1', '1.10', '1.2'].",
          "in": "query",
          "name": "sort",
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags",
      "responses": {
        "200": {
          "description": "A paginated list of tags matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_tags"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Tag",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new tag in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/tag"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags",
      "responses": {
        "201": {
          "description": "The newly created tag.",
          "schema": {
            "$ref": "#/definitions/tag"
          }
        },
        "400": {
          "description": "If the target hash is missing, ambiguous, or invalid, or if the name is not provided.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Tag",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a tag in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags/%7Bname%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the tag.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags/{name}",
      "responses": {
        "204": {
          "description": "Indicates the specified tag was successfully deleted."
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or tag does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Tag",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified tag.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags/%7Bname%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the tag.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags/{name}",
      "responses": {
        "200": {
          "description": "The tag object.",
          "schema": {
            "$ref": "#/definitions/tag"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or tag does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Src Main Root",
      "consumes": [
        "application/json"
      ],
      "description": "This endpoint redirects the client to the directory listing of the\nroot directory on the main branch.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/src#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Instead of returning the file's contents, return the (json) meta data for it.",
          "enum": [
            "meta"
          ],
          "in": "query",
          "name": "format",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/src",
      "responses": {
        "200": {
          "description": "If the path matches a file, then the raw contents of the file are\nreturned (unless the `format=meta` query parameter was provided,\nin which case a json document containing the file's meta data is\nreturned). If the path matches a directory, then a paginated\nlist of file and directory entries is returned (if the\n`format=meta` query parameter was provided, then the json document\ncontaining the directory's meta data is returned).\n",
          "schema": {
            "$ref": "#/definitions/paginated_treeentries"
          }
        },
        "404": {
          "description": "If the path or commit in the URL does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Src File Commit",
      "consumes": [
        "multipart/form-data",
        "application/x-www-form-urlencoded"
      ],
      "description": "This endpoint is used to create new commits in the repository by\nuploading files.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/src#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The commit message. When omitted, Bitbucket uses a canned string.",
          "in": "query",
          "name": "message",
          "required": false,
          "type": "string"
        },
        {
          "description": " The raw string to be used as the new commit's author. This string follows the format `Erik van Zijst <evzijst@atlassian.com>`.",
          "in": "query",
          "name": "author",
          "required": false,
          "type": "string"
        },
        {
          "description": " A comma-separated list of SHA1s of the commits that should be the parents of the newly created commit.",
          "in": "query",
          "name": "parents",
          "required": false,
          "type": "string"
        },
        {
          "description": " Optional field that declares the files that the request is manipulating. When adding a new file to a repo, or when overwriting an existing file, the client can just upload the full contents of the file in a normal form field and the use of this `files` meta data field is redundant. However, when the `files` field contains a file path that does not have a corresponding, identically-named form field, then Bitbucket interprets that as the client wanting to replace the named file with the null set and the file is deleted instead.",
          "in": "query",
          "name": "files",
          "required": false,
          "type": "string"
        },
        {
          "description": " The name of the branch that the new commit should be created on. When omitted, the commit will be created on top of the main branch and will become the main branch's new HEAD/tip.",
          "in": "query",
          "name": "files",
          "required": false,
          "type": "string"
        },
        {
          "description": " The name of the branch that the new commit should be created on. When omitted, the commit will be created on top of the main branch and will become the main branch's new head.",
          "in": "query",
          "name": "branch",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/src",
      "responses": {
        "200": {
          "description": "\n"
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Src",
      "consumes": [
        "application/json"
      ],
      "description": "This endpoints is used to retrieve the contents of a single file,\nor the contents of a directory at a specified revision.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/src/%7Bnode%7D/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. Since Git and Mercurial do not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents.",
          "enum": [
            "meta",
            "rendered"
          ],
          "in": "query",
          "name": "format",
          "required": false,
          "type": "string"
        },
        {
          "description": "Optional filter expression as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": "Optional sorting parameter as per [filtering and sorting](../../../../../../meta/filtering#query-sort).",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/src/{node}/{path}",
      "responses": {
        "200": {
          "description": "If the path matches a file, then the raw contents of the file are\nreturned.  If the `format=meta` query parameter is provided,\na json document containing the file's meta data is\nreturned.  If the `format=rendered` query parameter is provided,\nthe contents of the file in HTML-formated rendered markup is returned.\nIf the path matches a directory, then a paginated\nlist of file and directory entries is returned (if the\n`format=meta` query parameter was provided, then the json document\ncontaining the directory's meta data is returned.)\n",
          "schema": {
            "$ref": "#/definitions/paginated_treeentries"
          }
        },
        "404": {
          "description": "If the path or commit in the URL does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Versions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the versions that have been defined in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/versions#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/versions",
      "responses": {
        "200": {
          "description": "The versions that have been defined in the issue tracker.",
          "schema": {
            "$ref": "#/definitions/paginated_versions"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Issue Version",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue tracker version object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/versions/%7Bversion_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The version's id",
          "in": "path",
          "name": "version_id",
          "required": true,
          "type": "integer"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/versions/{version_id}",
      "responses": {
        "200": {
          "description": "The specified version object.",
          "schema": {
            "$ref": "#/definitions/version"
          }
        },
        "404": {
          "description": "The specified repository or version does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Watchers",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all the watchers on the specified\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/watchers#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/watchers",
      "responses": {
        "200": {
          "description": "A paginated list of all the watchers on the specified repository."
        }
      }
    },
    {
      "apiName": "List Permissions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns an object for each repository the caller has explicit access\nto and their effective permission — the highest level of permission the\ncaller has. This does not return public repositories that the user was\nnot granted any specific permission in, and does not distinguish between\ndirect and indirect privileges.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/permissions/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property sort the result by as per [filtering and sorting](../../../meta/filtering#query-sort). ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/user/permissions/repositories",
      "responses": {
        "200": {
          "description": "Repository permissions for the repositories a caller has explicit access to.",
          "schema": {
            "$ref": "#/definitions/paginated_repository_permissions"
          }
        }
      }
    }
  ],
  "branchrestrictions": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all branch restrictions on the\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions",
      "responses": {
        "200": {
          "description": "A paginated list of branch restrictions",
          "schema": {
            "$ref": "#/definitions/paginated_branchrestrictions"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new branch restriction rule for a repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new rule",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions",
      "responses": {
        "201": {
          "description": "A paginated list of branch restrictions",
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes an existing branch restriction rule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions/%7Bid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The restriction rule's id",
          "in": "path",
          "name": "id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions/{id}",
      "responses": {
        "204": {
          "description": ""
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or branch restriction id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a specific branch restriction rule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions/%7Bid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The restriction rule's id",
          "in": "path",
          "name": "id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions/{id}",
      "responses": {
        "200": {
          "description": "The branch restriction rule",
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or branch restriction id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update",
      "consumes": [
        "application/json"
      ],
      "description": "Updates an existing branch restriction rule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/branch-restrictions/%7Bid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The new version of the existing rule",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The restriction rule's id",
          "in": "path",
          "name": "id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/branch-restrictions/{id}",
      "responses": {
        "200": {
          "description": "The updated branch restriction rule",
          "schema": {
            "$ref": "#/definitions/branchrestriction"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have admin access to the repository",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the repository or branch restriction id does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "commits": [
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}",
      "responses": {
        "200": {
          "description": "The commit object",
          "schema": {
            "$ref": "#/definitions/commit"
          }
        },
        "404": {
          "description": "If the specified commit or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Redact the authenticated user's approval of the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/approve#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/approve",
      "responses": {
        "204": {
          "description": "An empty response indicating the authenticated user's approval has been withdrawn."
        },
        "404": {
          "description": "If the specified commit, or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Approval",
      "consumes": [
        "application/json"
      ],
      "description": "Approve the specified commit as the authenticated user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/approve#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/approve",
      "responses": {
        "200": {
          "description": "The `participant` object recording that the authenticated user approved the commit.",
          "schema": {
            "$ref": "#/definitions/participant"
          }
        },
        "404": {
          "description": "If the specified commit, or the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Comments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the commit's comments.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments",
      "responses": {
        "200": {
          "description": "A paginated list of commit comments.",
          "schema": {
            "$ref": "#/definitions/paginated_commit_comments"
          }
        }
      }
    },
    {
      "apiName": "Create Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Creates new comment on the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The specified comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/commit_comment"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments",
      "responses": {
        "201": {
          "description": "The newly created comment.",
          "headers": {
            "Location": {
              "description": "The location of the newly created comment.",
              "type": "string"
            }
          }
        },
        "400": {
          "description": "If the comment was detected as spam, or if the parent comment is not attached to the same node as the new comment"
        },
        "404": {
          "description": "If a parent ID was passed in that cannot be found"
        }
      }
    },
    {
      "apiName": "Get Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified commit comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/comments/%7Bcomment_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the comment.",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The commit comment.",
          "schema": {
            "$ref": "#/definitions/commit_comment"
          }
        }
      }
    },
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "These are the repository's commits. They are paginated and returned\nin reverse chronological order, similar to the output of `git log` and\n`hg log`. Like these tools, the DAG can be filtered.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "exclude",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Fetch All",
      "consumes": [
        "application/x-www-form-urlencoded"
      ],
      "description": "Identical to `GET /repositories/{username}/{repo_slug}/commits`,\nexcept that POST allows clients to place the include and exclude\nparameters in the request body to avoid URL length issues.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "exclude",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List For Revision",
      "consumes": [
        "application/json"
      ],
      "description": "These are the repository's commits. They are paginated and returned\nin reverse chronological order, similar to the output of `git log` and\n`hg log`. Like these tools, the DAG can be filtered.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "exclude",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits/{revision}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Fetch All For Revision",
      "consumes": [
        "application/json"
      ],
      "description": "Identical to `GET /repositories/{username}/{repo_slug}/commits`,\nexcept that POST allows clients to place the include and exclude\nparameters in the request body to avoid URL length issues.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "include",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "exclude",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commits/{revision}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Diff",
      "consumes": [
        "application/json"
      ],
      "description": "Produces a raw, git-style diff for either a single commit (diffed\nagainst its first parent), or a revspec of 2 commits (e.g.\n`3a8b42..9ff173` where the first commit represents the source and the\nsecond commit the destination).",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/diff/%7Bspec%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Generate diffs with <n> lines of context instead of the usual three",
          "in": "query",
          "name": "context",
          "required": false,
          "type": "integer"
        },
        {
          "description": "Limit the diff to a particular file (this parameter can be repeated for multiple paths)",
          "in": "query",
          "name": "path",
          "required": false,
          "type": "string"
        },
        {
          "description": "Generate diffs that ignore whitespace",
          "in": "query",
          "name": "ignore_whitespace",
          "required": false,
          "type": "boolean"
        },
        {
          "description": "Generate diffs that include binary files,true if omitted.",
          "in": "query",
          "name": "binary",
          "required": false,
          "type": "boolean"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "spec",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/diff/{spec}",
      "responses": {
        "200": {
          "description": "The raw diff"
        },
        "555": {
          "description": "If the diff was too large and timed out.\n\nSince this endpoint does not employ any form of pagination, but\ninstead returns the diff as a single document, it can run into\ntrouble on very large diffs. If Bitbucket times out in cases\nlike these, a 555 status code is returned.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Patch",
      "consumes": [
        "application/json"
      ],
      "description": "Produces a raw patch for a single commit (diffed against its first\nparent), or a patch-series for a revspec of 2 commits (e.g.\n`3a8b42..9ff173` where the first commit represents the source and the\nsecond commit the destination).",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/patch/%7Bspec%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "spec",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/patch/{spec}",
      "responses": {
        "200": {
          "description": "The raw patches"
        },
        "555": {
          "description": "If the diff was too large and timed out.\n\nSince this endpoint does not employ any form of pagination, but\ninstead returns the diff as a single document, it can run into\ntrouble on very large diffs. If Bitbucket times out in cases\nlike these, a 555 status code is returned.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "commitstatuses": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all statuses (e.g. build results) for a specific commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses",
      "responses": {
        "200": {
          "description": "A paginated list of all commit statuses for this commit.",
          "schema": {
            "$ref": "#/definitions/paginated_commitstatuses"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository or commit does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Build Status",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new build status against the specified commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new commit status object.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build",
      "responses": {
        "201": {
          "description": "The newly created build status object.",
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository, commit, or build status key does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Build Status",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified build status for a commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build/%7Bkey%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "The build status' unique key",
          "in": "path",
          "name": "key",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build/{key}",
      "responses": {
        "200": {
          "description": "The build status object with the specified key.",
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository, commit, or build status key does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Build Status",
      "consumes": [
        "application/json"
      ],
      "description": "Used to update the current status of a build status object on the\nspecific commit.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commit/%7Bnode%7D/statuses/build/%7Bkey%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The updated build status object",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The commit's SHA1.",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "The build status' unique key",
          "in": "path",
          "name": "key",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/commit/{node}/statuses/build/{key}",
      "responses": {
        "200": {
          "description": "The updated build status object.",
          "schema": {
            "$ref": "#/definitions/commitstatus"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the repository or build does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pull Request Statuses",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all statuses (e.g. build results) for the given pull\nrequest.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pullrequests/%7Bpull_request_id%7D/statuses#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The id of the pull request.",
          "in": "path",
          "name": "pull_request_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pullrequests/{pull_request_id}/statuses",
      "responses": {
        "200": {
          "description": "A paginated list of all commit statuses for this pull request.",
          "schema": {
            "$ref": "#/definitions/paginated_commitstatuses"
          }
        },
        "401": {
          "description": "If the repository is private and the request was not authenticated."
        },
        "404": {
          "description": "If the specified repository or pull request does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "issue_tracker": [
    {
      "apiName": "List Components",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the components that have been defined in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/components#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/components",
      "responses": {
        "200": {
          "description": "The components that have been defined in the issue tracker.",
          "schema": {
            "$ref": "#/definitions/paginated_components"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Component",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue tracker component object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/components/%7Bcomponent_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The component's id",
          "in": "path",
          "name": "component_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/components/{component_id}",
      "responses": {
        "200": {
          "description": "The specified component object.",
          "schema": {
            "$ref": "#/definitions/component"
          }
        },
        "404": {
          "description": "The specified repository or component does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the issues in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues",
      "responses": {
        "200": {
          "description": "A paginated list of the issues matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_issues"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new issue. The only required element is `title`. All other elements can be omitted from the body.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues",
      "responses": {
        "201": {
          "description": "The newly created issue.",
          "headers": {
            "Location": {
              "description": "The (absolute) URL of the newly created issue.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to create the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified issue. This requires write access to the\nrepository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}",
      "responses": {
        "200": {
          "description": "The issue object.",
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to delete the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}",
      "responses": {
        "200": {
          "description": "The issue object.",
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to access the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update",
      "consumes": [
        "application/json"
      ],
      "description": "Modifies the issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}",
      "responses": {
        "200": {
          "description": "The updated issue object.",
          "schema": {
            "$ref": "#/definitions/issue"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to access the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Attachments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all attachments for this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The issue's id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments",
      "responses": {
        "200": {
          "description": "A paginated list of all attachments for this issue.",
          "schema": {
            "$ref": "#/definitions/paginated_issue_attachments"
          }
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Attachments",
      "consumes": [
        "multipart/form-data"
      ],
      "description": "Upload new issue attachments.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The issue's id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "integer"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments",
      "responses": {
        "201": {
          "description": "An empty response document.",
          "headers": {
            "Location": {
              "description": "The URL to the issue's collection of attachments.",
              "type": "string"
            }
          }
        },
        "400": {
          "description": "If no files were uploaded, or if the wrong `Content-Type` was used."
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Attachment",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes an attachment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments/%7Bpath%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments/{path}",
      "responses": {
        "204": {
          "description": "Indicates that the deletion was successful"
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Attachment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the contents of the specified file attachment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/attachments/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/attachments/{path}",
      "responses": {
        "302": {
          "description": "A redirect to the file's contents",
          "headers": {
            "Location": {
              "type": "string"
            }
          }
        },
        "401": {
          "description": "If the issue tracker is private and the request was not authenticated."
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Changes",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the list of all changes that have been made to the specified\nissue. Changes are returned in chronological order with the oldest\nchange first.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/changes#get",
      "method": "GET",
      "parameters": [
        {
          "description": " Query string to narrow down the response. See [filtering and sorting](../../../meta/filtering) for details.",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property to sort results. See [filtering and sorting](../../../meta/filtering#query-sort) for details. ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/changes",
      "responses": {
        "200": {
          "description": "Returns all the issue changes that were made on the specified issue.",
          "schema": {
            "$ref": "#/definitions/paginated_log_entries"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Change",
      "consumes": [
        "application/json"
      ],
      "description": "Makes a change to the specified issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/changes#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new issue state change. The only required elements are `changes.[].new`. All other elements can be omitted from the body.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_change"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/changes",
      "responses": {
        "201": {
          "description": "The newly created issue change.",
          "headers": {
            "Location": {
              "description": "The (absolute) URL of the newly created issue change.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/issue_change"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "When the authenticated user isn't authorized to modify the issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Change",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue change object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/changes/%7Bchange_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue change id",
          "in": "path",
          "name": "change_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/changes/{change_id}",
      "responses": {
        "200": {
          "description": "The specified issue change object.",
          "schema": {
            "$ref": "#/definitions/issue_change"
          }
        },
        "404": {
          "description": "The specified repository or issue change does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Comments",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of all comments that were made on the\nspecified issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments",
      "responses": {
        "200": {
          "description": "A paginated list of issue comments.",
          "schema": {
            "$ref": "#/definitions/paginated_issue_comments"
          }
        }
      }
    },
    {
      "apiName": "Create Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new issue comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The new issue comment object.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments",
      "responses": {
        "201": {
          "description": "The newly created comment.",
          "headers": {
            "Location": {
              "description": "The location of the newly issue comment.",
              "type": "string"
            }
          }
        },
        "400": {
          "description": "If the input was invalid, or if the comment being created is detected as spam ",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The ID of the issue that is being queried. ",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}",
      "responses": {
        "204": {
          "description": "Indicates successful deletion."
        }
      }
    },
    {
      "apiName": "Get Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue comment object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The ID of the issue that is being queried. ",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The issue comment.",
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        }
      }
    },
    {
      "apiName": "Update Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the content of the specified issue comment. Note that only\nthe `content.raw` field can be modified.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/comments/%7Bcomment_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The ID of the issue that is being queried. ",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The updated issue comment.",
          "schema": {
            "$ref": "#/definitions/issue_comment"
          }
        },
        "400": {
          "description": "If the input was invalid, or if the update to the comment is detected as spam ",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Vote",
      "consumes": [
        "application/json"
      ],
      "description": "Retract your vote.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/vote#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/vote",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Vote",
      "consumes": [
        "application/json"
      ],
      "description": "Check whether the authenticated user has voted for this issue.\nA 204 status code indicates that the user has voted, while a 404\nimplies they haven't.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/vote#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/vote",
      "responses": {
        "204": {
          "description": "If the authenticated user has not voted for this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the authenticated user has not voted for this issue, or when the repo does not exist, or does not have an issue tracker.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Vote",
      "consumes": [
        "application/json"
      ],
      "description": "Vote for this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/vote#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/vote",
      "responses": {
        "204": {
          "description": "Indicating the authenticated user has cast their vote successfully.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Stop watching this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/watch#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/watch",
      "responses": {
        "204": {
          "description": "Indicates that the authenticated user successfully stopped watching this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or issue does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Indicated whether or not the authenticated user is watching this\nissue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/watch#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/watch",
      "responses": {
        "204": {
          "description": "If the authenticated user is watching this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the authenticated user is not watching this issue, or when the repo does not exist, or does not have an issue tracker.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Start watching this issue.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/issues/%7Bissue_id%7D/watch#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The issue id",
          "in": "path",
          "name": "issue_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/issues/{issue_id}/watch",
      "responses": {
        "204": {
          "description": "Indicates that the authenticated user successfully started watching this issue.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the authenticated user is not watching this issue, or when the repo does not exist, or does not have an issue tracker.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Milestones",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the milestones that have been defined in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/milestones#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/milestones",
      "responses": {
        "200": {
          "description": "The milestones that have been defined in the issue tracker.",
          "schema": {
            "$ref": "#/definitions/paginated_milestones"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Milestone",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue tracker milestone object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/milestones/%7Bmilestone_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The milestone's id",
          "in": "path",
          "name": "milestone_id",
          "required": true,
          "type": "integer"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/milestones/{milestone_id}",
      "responses": {
        "200": {
          "description": "The specified milestone object.",
          "schema": {
            "$ref": "#/definitions/milestone"
          }
        },
        "404": {
          "description": "The specified repository or milestone does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Versions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the versions that have been defined in the issue tracker.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/versions#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/versions",
      "responses": {
        "200": {
          "description": "The versions that have been defined in the issue tracker.",
          "schema": {
            "$ref": "#/definitions/paginated_versions"
          }
        },
        "404": {
          "description": "The specified repository does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Version",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified issue tracker version object.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/versions/%7Bversion_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The version's id",
          "in": "path",
          "name": "version_id",
          "required": true,
          "type": "integer"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/versions/{version_id}",
      "responses": {
        "200": {
          "description": "The specified version object.",
          "schema": {
            "$ref": "#/definitions/version"
          }
        },
        "404": {
          "description": "The specified repository or version does not exist or does not have the issue tracker enabled.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "deployments": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Find deployments",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/deployments/#get",
      "method": "GET",
      "operationId": "getDeploymentsForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/deployments/",
      "responses": {
        "200": {
          "description": "The matching deployments.",
          "schema": {
            "$ref": "#/definitions/paginated_deployments"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a deployment",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/deployments/%7Bdeployment_uuid%7D#get",
      "method": "GET",
      "operationId": "getDeploymentForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The deployment UUID.",
          "in": "path",
          "name": "deployment_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/deployments/{deployment_uuid}",
      "responses": {
        "200": {
          "description": "The deployment.",
          "schema": {
            "$ref": "#/definitions/deployment"
          }
        },
        "404": {
          "description": "No account, repository or deployment with the UUID provided exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Environment",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve an environment",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/environments/%7Benvironment_uuid%7D#get",
      "method": "GET",
      "operationId": "getEnvironmentForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The environment UUID.",
          "in": "path",
          "name": "environment_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/environments/{environment_uuid}",
      "responses": {
        "200": {
          "description": "The environment.",
          "schema": {
            "$ref": "#/definitions/deployment_environment"
          }
        },
        "404": {
          "description": "No account, repository or environment with the UUID provided exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "downloads": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a list of download links associated with the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "multipart/form-data"
      ],
      "description": "Upload new download artifacts.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified download artifact from the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads/%7Bfilename%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "filename",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads/{filename}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Return a redirect to the contents of a download artifact.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/downloads/%7Bfilename%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "filename",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/downloads/{filename}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "source": [
    {
      "apiName": "List History",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of commits that modified the specified file.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/filehistory/%7Bnode%7D/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": " When `true`, Bitbucket will follow the history of the file across renames (this is the default behavior). This can be turned off by specifying `false`.",
          "in": "query",
          "name": "renames",
          "required": false,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property sort the result by as per [filtering and sorting](../../../../../../meta/filtering#query-sort). ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "query",
          "name": "fields",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/filehistory/{node}/{path}",
      "responses": {
        "200": {
          "description": "A paginated list of commits that modified the specified file",
          "schema": {
            "$ref": "#/definitions/paginated_files"
          }
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Main Root",
      "consumes": [
        "application/json"
      ],
      "description": "This endpoint redirects the client to the directory listing of the\nroot directory on the main branch.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/src#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Instead of returning the file's contents, return the (json) meta data for it.",
          "enum": [
            "meta"
          ],
          "in": "query",
          "name": "format",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/src",
      "responses": {
        "200": {
          "description": "If the path matches a file, then the raw contents of the file are\nreturned (unless the `format=meta` query parameter was provided,\nin which case a json document containing the file's meta data is\nreturned). If the path matches a directory, then a paginated\nlist of file and directory entries is returned (if the\n`format=meta` query parameter was provided, then the json document\ncontaining the directory's meta data is returned).\n",
          "schema": {
            "$ref": "#/definitions/paginated_treeentries"
          }
        },
        "404": {
          "description": "If the path or commit in the URL does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create File Commit",
      "consumes": [
        "multipart/form-data",
        "application/x-www-form-urlencoded"
      ],
      "description": "This endpoint is used to create new commits in the repository by\nuploading files.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/src#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The commit message. When omitted, Bitbucket uses a canned string.",
          "in": "query",
          "name": "message",
          "required": false,
          "type": "string"
        },
        {
          "description": " The raw string to be used as the new commit's author. This string follows the format `Erik van Zijst <evzijst@atlassian.com>`.",
          "in": "query",
          "name": "author",
          "required": false,
          "type": "string"
        },
        {
          "description": " A comma-separated list of SHA1s of the commits that should be the parents of the newly created commit.",
          "in": "query",
          "name": "parents",
          "required": false,
          "type": "string"
        },
        {
          "description": " Optional field that declares the files that the request is manipulating. When adding a new file to a repo, or when overwriting an existing file, the client can just upload the full contents of the file in a normal form field and the use of this `files` meta data field is redundant. However, when the `files` field contains a file path that does not have a corresponding, identically-named form field, then Bitbucket interprets that as the client wanting to replace the named file with the null set and the file is deleted instead.",
          "in": "query",
          "name": "files",
          "required": false,
          "type": "string"
        },
        {
          "description": " The name of the branch that the new commit should be created on. When omitted, the commit will be created on top of the main branch and will become the main branch's new HEAD/tip.",
          "in": "query",
          "name": "files",
          "required": false,
          "type": "string"
        },
        {
          "description": " The name of the branch that the new commit should be created on. When omitted, the commit will be created on top of the main branch and will become the main branch's new head.",
          "in": "query",
          "name": "branch",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/src",
      "responses": {
        "200": {
          "description": "\n"
        },
        "404": {
          "description": "If the repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "This endpoints is used to retrieve the contents of a single file,\nor the contents of a directory at a specified revision.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/src/%7Bnode%7D/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. Since Git and Mercurial do not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents.",
          "enum": [
            "meta",
            "rendered"
          ],
          "in": "query",
          "name": "format",
          "required": false,
          "type": "string"
        },
        {
          "description": "Optional filter expression as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": "Optional sorting parameter as per [filtering and sorting](../../../../../../meta/filtering#query-sort).",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/src/{node}/{path}",
      "responses": {
        "200": {
          "description": "If the path matches a file, then the raw contents of the file are\nreturned.  If the `format=meta` query parameter is provided,\na json document containing the file's meta data is\nreturned.  If the `format=rendered` query parameter is provided,\nthe contents of the file in HTML-formated rendered markup is returned.\nIf the path matches a directory, then a paginated\nlist of file and directory entries is returned (if the\n`format=meta` query parameter was provided, then the json document\ncontaining the directory's meta data is returned.)\n",
          "schema": {
            "$ref": "#/definitions/paginated_treeentries"
          }
        },
        "404": {
          "description": "If the path or commit in the URL does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "pipelines": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Find pipelines",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/#get",
      "method": "GET",
      "operationId": "getPipelinesForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/",
      "responses": {
        "200": {
          "description": "The matching pipelines.",
          "schema": {
            "$ref": "#/definitions/paginated_pipelines"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "application/json"
      ],
      "description": "Endpoint to create and initiate a pipeline. \nThere are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated.\n# Trigger a Pipeline for a branch\nOne way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline. \nThe specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/#post",
      "method": "POST",
      "operationId": "createPipelineForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The pipeline to initiate.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/",
      "responses": {
        "201": {
          "description": "The initiated pipeline.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline"
          }
        },
        "400": {
          "description": "The account or repository is not enabled, the yml file does not exist in the repository for the given revision, or the request body contained invalid properties.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a specified pipeline",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The pipeline UUID.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}",
      "responses": {
        "200": {
          "description": "The pipeline.",
          "schema": {
            "$ref": "#/definitions/pipeline"
          }
        },
        "404": {
          "description": "No account, repository or pipeline with the UUID provided exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Steps",
      "consumes": [
        "application/json"
      ],
      "description": "Find steps for the given pipeline.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/steps/#get",
      "method": "GET",
      "operationId": "getPipelineStepsForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/steps/",
      "responses": {
        "200": {
          "description": "The steps.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_steps"
          }
        }
      }
    },
    {
      "apiName": "Get Step",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a given step of a pipeline.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/steps/%7Bstep_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineStepForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the step.",
          "in": "path",
          "name": "step_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}",
      "responses": {
        "200": {
          "description": "The step.",
          "schema": {
            "$ref": "#/definitions/pipeline_step"
          }
        },
        "404": {
          "description": "No account, repository, pipeline or step with the UUID provided exists for the pipeline with the UUID provided.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Step Log",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the log file for a given step of a pipeline.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/steps/%7Bstep_uuid%7D/log#get",
      "method": "GET",
      "operationId": "getPipelineStepLogForRepository",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the step.",
          "in": "path",
          "name": "step_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log",
      "produces": [
        "application/octet-stream"
      ],
      "responses": {
        "200": {
          "description": "The raw log file for this pipeline step."
        },
        "304": {
          "description": "The log has the same etag as the provided If-None-Match header.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A pipeline with the given UUID does not exist, a step with the given UUID does not exist in the pipeline or a log file does not exist for the given step.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "416": {
          "description": "The requested range does not exist for requests that specified the [HTTP Range header](https://tools.ietf.org/html/rfc7233#section-3.1).",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Stop",
      "consumes": [
        "application/json"
      ],
      "description": "Signal the stop of a pipeline and all of its steps that not have completed yet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines/%7Bpipeline_uuid%7D/stopPipeline#post",
      "method": "POST",
      "operationId": "stopPipeline",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the pipeline.",
          "in": "path",
          "name": "pipeline_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline",
      "responses": {
        "204": {
          "description": "The pipeline has been signaled to stop."
        },
        "400": {
          "description": "The specified pipeline has already completed.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "Either the account, repository or pipeline with the given UUID does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Config",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the repository pipelines configuration.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineConfig",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config",
      "responses": {
        "200": {
          "description": "The repository pipelines configuration.",
          "schema": {
            "$ref": "#/definitions/pipelines_config"
          }
        }
      }
    },
    {
      "apiName": "Update Config",
      "consumes": [
        "application/json"
      ],
      "description": "Update the pipelines configuration for a repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineConfig",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated repository pipelines configuration.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipelines_config"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config",
      "responses": {
        "200": {
          "description": "The repository pipelines configuration was updated.",
          "schema": {
            "$ref": "#/definitions/pipelines_config"
          }
        }
      }
    },
    {
      "apiName": "Update Build Number",
      "consumes": [
        "application/json"
      ],
      "description": "Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/build_number#put",
      "method": "PUT",
      "operationId": "updateRepositoryBuildNumber",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The build number to update.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_build_number"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/build_number",
      "responses": {
        "200": {
          "description": "The build number has been configured.",
          "schema": {
            "$ref": "#/definitions/pipeline_build_number"
          }
        },
        "400": {
          "description": "The update failed because the next number was invalid (it should be higher than the current number).",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Schedules",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the configured schedules for the given repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineSchedules",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/",
      "responses": {
        "200": {
          "description": "The list of schedules.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_schedules"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Create a schedule for the given repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/#post",
      "method": "POST",
      "operationId": "createRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The schedule to create.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/",
      "responses": {
        "201": {
          "description": "The created schedule.",
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        },
        "400": {
          "description": "There were errors validating the request.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "401": {
          "description": "The maximum limit of schedules for this repository was reached.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a schedule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The uuid of the schedule.",
          "in": "path",
          "name": "schedule_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
      "responses": {
        "204": {
          "description": "The schedule was deleted."
        },
        "404": {
          "description": "The account, repository or schedule was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a schedule by its UUID.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The uuid of the schedule.",
          "in": "path",
          "name": "schedule_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
      "responses": {
        "200": {
          "description": "The requested schedule.",
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        },
        "404": {
          "description": "The account, repository or schedule was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Schedule",
      "consumes": [
        "application/json"
      ],
      "description": "Update a schedule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineSchedule",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The uuid of the schedule.",
          "in": "path",
          "name": "schedule_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The schedule to update.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}",
      "responses": {
        "200": {
          "description": "The schedule is updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_schedule"
          }
        },
        "404": {
          "description": "The account, repository or schedule was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Schedule Executions",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the executions of a given schedule.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/schedules/%7Bschedule_uuid%7D/executions/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineScheduleExecutions",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions/",
      "responses": {
        "200": {
          "description": "The list of executions of a schedule.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_schedule_executions"
          }
        },
        "404": {
          "description": "The account or repository was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Ssh Key Pair",
      "consumes": [
        "application/json"
      ],
      "description": "Delete the repository SSH key pair.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/key_pair#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineKeyPair",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/key_pair",
      "responses": {
        "204": {
          "description": "The SSH key pair was deleted."
        },
        "404": {
          "description": "The account, repository or SSH key pair was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Ssh Key Pair",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/key_pair#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineSshKeyPair",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/key_pair",
      "responses": {
        "200": {
          "description": "The SSH key pair.",
          "schema": {
            "$ref": "#/definitions/pipeline_ssh_key_pair"
          }
        },
        "404": {
          "description": "The account, repository or SSH key pair was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Ssh Key Pair",
      "consumes": [
        "application/json"
      ],
      "description": "Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/key_pair#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineKeyPair",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The created or updated SSH key pair.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_ssh_key_pair"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/key_pair",
      "responses": {
        "200": {
          "description": "The SSH key pair was created or updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_ssh_key_pair"
          }
        },
        "404": {
          "description": "The account, repository or SSH key pair was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Known Hosts",
      "consumes": [
        "application/json"
      ],
      "description": "Find repository level known hosts.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineKnownHosts",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/",
      "responses": {
        "200": {
          "description": "The retrieved known hosts.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_known_hosts"
          }
        }
      }
    },
    {
      "apiName": "Create Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Create a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/#post",
      "method": "POST",
      "operationId": "createRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The known host to create.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/",
      "responses": {
        "201": {
          "description": "The known host was created.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline known host.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        },
        "404": {
          "description": "The account or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A known host with the provided hostname already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/%7Bknown_host_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the known host to delete.",
          "in": "path",
          "name": "known_host_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
      "responses": {
        "204": {
          "description": "The known host was deleted."
        },
        "404": {
          "description": "The account, repository or known host with given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/%7Bknown_host_uuid%7D#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the known host to retrieve.",
          "in": "path",
          "name": "known_host_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
      "responses": {
        "200": {
          "description": "The known host.",
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        },
        "404": {
          "description": "The account, repository or known host with the specified UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Known Host",
      "consumes": [
        "application/json"
      ],
      "description": "Update a repository level known host.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/ssh/known_hosts/%7Bknown_host_uuid%7D#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineKnownHost",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the known host to update.",
          "in": "path",
          "name": "known_host_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated known host.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}",
      "responses": {
        "200": {
          "description": "The known host was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_known_host"
          }
        },
        "404": {
          "description": "The account, repository or known host with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Variables For Repo",
      "consumes": [
        "application/json"
      ],
      "description": "Find repository level variables.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineVariables",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/",
      "responses": {
        "200": {
          "description": "The retrieved variables.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_variables"
          }
        }
      }
    },
    {
      "apiName": "Create Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Create a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/#post",
      "method": "POST",
      "operationId": "createRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The variable to create.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/",
      "responses": {
        "201": {
          "description": "The variable was created.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline variable.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A variable with the provided key already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/%7Bvariable_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deleteRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to delete.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "204": {
          "description": "The variable was deleted."
        },
        "404": {
          "description": "The account, repository or variable with given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/%7Bvariable_uuid%7D#get",
      "method": "GET",
      "operationId": "getRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to retrieve.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account, repository or variable with the specified UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Update a repository level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/pipelines_config/variables/%7Bvariable_uuid%7D#put",
      "method": "PUT",
      "operationId": "updateRepositoryPipelineVariable",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The repository.",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to update.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated variable",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account, repository or variable with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Variables For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Find account level variables.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/#get",
      "method": "GET",
      "operationId": "getPipelineVariablesForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/",
      "responses": {
        "200": {
          "description": "The found account level variables.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_variables"
          }
        }
      }
    },
    {
      "apiName": "Create Variable For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Create an account level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/#post",
      "method": "POST",
      "operationId": "createPipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The variable to create.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/",
      "responses": {
        "201": {
          "description": "The created variable.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline variable.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A variable with the provided key already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Variable For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a team level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deletePipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to delete.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "204": {
          "description": "The variable was deleted"
        },
        "404": {
          "description": "The account or the variable with the provided UUID does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Variable For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a team level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to retrieve.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or variable with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Variable For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Update a team level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#put",
      "method": "PUT",
      "operationId": "updatePipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated variable.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or the variable was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Variables For User",
      "consumes": [
        "application/json"
      ],
      "description": "Find user level variables.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/#get",
      "method": "GET",
      "operationId": "getPipelineVariablesForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/",
      "responses": {
        "200": {
          "description": "The found user level variables.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_variables"
          }
        }
      }
    },
    {
      "apiName": "Create Variable For User",
      "consumes": [
        "application/json"
      ],
      "description": "Create a user level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/#post",
      "method": "POST",
      "operationId": "createPipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The variable to create.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/",
      "responses": {
        "201": {
          "description": "The created variable.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline variable.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A variable with the provided key already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Variable For User",
      "consumes": [
        "application/json"
      ],
      "description": "Delete an account level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deletePipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to delete.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "204": {
          "description": "The variable was deleted"
        },
        "404": {
          "description": "The account or the variable with the provided UUID does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Variable For User",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a user level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to retrieve.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or variable with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Variable For User",
      "consumes": [
        "application/json"
      ],
      "description": "Update a user level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#put",
      "method": "PUT",
      "operationId": "updatePipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated variable.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or the variable was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "refs": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the branches and tags in the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs#get",
      "method": "GET",
      "parameters": [
        {
          "description": " This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "type": "string"
        },
        {
          "description": " Field by which the results should be sorted as per [filtering and sorting](../../../../../../meta/filtering). The `name` field is handled specially for refs in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return ['1.1', '1.2', '1.10'] instead of ['1.1', '1.10', '1.2'].",
          "in": "query",
          "name": "sort",
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs",
      "responses": {
        "200": {
          "description": "A paginated list of refs matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_refs"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Branches",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a list of all open branches within the specified repository.\nResults will be in the order the source control manager returns them.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches#get",
      "method": "GET",
      "parameters": [
        {
          "description": " This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "type": "string"
        },
        {
          "description": " Field by which the results should be sorted as per [filtering and sorting](../../../../../../meta/filtering). The `name` field is handled specially for branches in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return ['branch1', 'branch2', 'branch10'] instead of ['branch1', 'branch10', 'branch2'].",
          "in": "query",
          "name": "sort",
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches",
      "responses": {
        "200": {
          "description": "A paginated list of branches matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_branches"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Branch",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new branch in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches#post",
      "method": "POST",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches",
      "responses": {
        "201": {
          "description": "The newly created branch object.",
          "examples": {
            "application/json": {
              "links": {
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits/master"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/branch/master"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches/master"
                }
              },
              "name": "master",
              "target": {
                "author": {
                  "raw": "Example Username <brian_stamm@gmail.com>",
                  "type": "author",
                  "user": {
                    "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                    "display_name": "Example Username",
                    "links": {
                      "avatar": {
                        "href": "https://bitbucket.org/account/example-username/avatar/"
                      },
                      "html": {
                        "href": "https://bitbucket.org/example-username/"
                      },
                      "self": {
                        "href": "https://api.bitbucket.org/2.0/users/example-username"
                      }
                    },
                    "nickname": "example-username",
                    "type": "user",
                    "username": "example-username",
                    "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
                  }
                },
                "date": "2018-06-20T23:17:33+00:00",
                "hash": "230269fdfabdb5562a991f351b5dd6425de232d2",
                "links": {
                  "approve": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/approve"
                  },
                  "comments": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/comments"
                  },
                  "diff": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/diff/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "patch": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/patch/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "statuses": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/statuses"
                  }
                },
                "message": "Kickass commit message!",
                "parents": [],
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                },
                "type": "commit"
              },
              "type": "branch"
            }
          },
          "schema": {
            "$ref": "#/definitions/branch"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or branch does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Branch",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a branch in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches/%7Bname%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the branch.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches/{name}",
      "responses": {
        "204": {
          "description": "Indicates that the specified branch was successfully deleted."
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or branch does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Branch",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a branch object within the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/branches/%7Bname%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the branch.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/branches/{name}",
      "responses": {
        "200": {
          "description": "The branch object.",
          "examples": {
            "application/json": {
              "links": {
                "commits": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commits/master"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/bits_and_bobs/branch/master"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/refs/branches/master"
                }
              },
              "name": "master",
              "target": {
                "author": {
                  "raw": "Example Username <brian_stamm@gmail.com>",
                  "type": "author",
                  "user": {
                    "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
                    "display_name": "Example Username",
                    "links": {
                      "avatar": {
                        "href": "https://bitbucket.org/account/example-username/avatar/"
                      },
                      "html": {
                        "href": "https://bitbucket.org/example-username/"
                      },
                      "self": {
                        "href": "https://api.bitbucket.org/2.0/users/example-username"
                      }
                    },
                    "nickname": "example-username",
                    "type": "user",
                    "username": "example-username",
                    "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
                  }
                },
                "date": "2018-06-20T23:17:33+00:00",
                "hash": "230269fdfabdb5562a991f351b5dd6425de232d2",
                "links": {
                  "approve": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/approve"
                  },
                  "comments": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/comments"
                  },
                  "diff": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/diff/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "html": {
                    "href": "https://bitbucket.org/example-username/bits_and_bobs/commits/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "patch": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/patch/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "self": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2"
                  },
                  "statuses": {
                    "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs/commit/230269fdfabdb5562a991f351b5dd6425de232d2/statuses"
                  }
                },
                "message": "Kickass commit message!",
                "parents": [],
                "repository": {
                  "full_name": "example-username/bits_and_bobs",
                  "links": {
                    "avatar": {
                      "href": "https://bytebucket.org/ravatar/%7B7708d810-964c-403f-aa6d-4e949280d614%7D?ts=python"
                    },
                    "html": {
                      "href": "https://bitbucket.org/example-username/bits_and_bobs"
                    },
                    "self": {
                      "href": "https://api.bitbucket.org/2.0/repositories/example-username/bits_and_bobs"
                    }
                  },
                  "name": "bits_and_bobs",
                  "type": "repository",
                  "uuid": "{7708d810-964c-403f-aa6d-4e949280d614}"
                },
                "type": "commit"
              },
              "type": "branch"
            }
          },
          "schema": {
            "$ref": "#/definitions/branch"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or branch does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Tags",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the tags in the repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags#get",
      "method": "GET",
      "parameters": [
        {
          "description": " This can either be the username or the UUID of the user, surrounded by curly-braces, for example: `{user UUID}`. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "type": "string"
        },
        {
          "description": " Field by which the results should be sorted as per [filtering and sorting](../../../../../../meta/filtering). The `name` field is handled specially for tags in that, if specified as the sort field, it uses a natural sort order instead of the default lexicographical sort order. For example, it will return ['1.1', '1.2', '1.10'] instead of ['1.1', '1.10', '1.2'].",
          "in": "query",
          "name": "sort",
          "type": "string"
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags",
      "responses": {
        "200": {
          "description": "A paginated list of tags matching any filter criteria that were provided.",
          "schema": {
            "$ref": "#/definitions/paginated_tags"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Tag",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new tag in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/tag"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags",
      "responses": {
        "201": {
          "description": "The newly created tag.",
          "schema": {
            "$ref": "#/definitions/tag"
          }
        },
        "400": {
          "description": "If the target hash is missing, ambiguous, or invalid, or if the name is not provided.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Tag",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a tag in the specified repository.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags/%7Bname%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the tag.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags/{name}",
      "responses": {
        "204": {
          "description": "Indicates the specified tag was successfully deleted."
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or tag does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Tag",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specified tag.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/refs/tags/%7Bname%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The name of the tag.",
          "in": "path",
          "name": "name",
          "required": true,
          "type": "string"
        },
        {
          "description": "This can either be the repository slug or the UUID of the repository, surrounded by curly-braces, for example: `{repository UUID}`. ",
          "in": "path",
          "name": "repo_slug",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/repositories/{username}/{repo_slug}/refs/tags/{name}",
      "responses": {
        "200": {
          "description": "The tag object.",
          "schema": {
            "$ref": "#/definitions/tag"
          }
        },
        "403": {
          "description": "If the repository is private and the authenticated user does not have\naccess to it.\n",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "The specified repository or tag does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "snippets": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all snippets. Like pull requests, repositories and teams, the\nfull set of snippets is defined by what the current user has access to.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).",
          "enum": [
            "owner",
            "contributor",
            "member"
          ],
          "in": "query",
          "name": "role",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/snippets",
      "responses": {
        "200": {
          "description": "A paginated list of snippets.",
          "schema": {
            "$ref": "#/definitions/paginated_snippets"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new snippet under the authenticated user's account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new snippet object.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        }
      ],
      "path": "/snippets",
      "responses": {
        "201": {
          "description": "The newly created snippet object.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created snippet.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List For User",
      "consumes": [
        "application/json"
      ],
      "description": "Identical to `/snippets`, except that the result is further filtered\nby the snippet owner and only those that are owned by `{username}` are\nreturned.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).",
          "enum": [
            "owner",
            "contributor",
            "member"
          ],
          "in": "query",
          "name": "role",
          "required": false,
          "type": "string"
        },
        {
          "description": "Limits the result to snippets owned by this user.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}",
      "responses": {
        "200": {
          "description": "A paginated list of snippets.",
          "schema": {
            "$ref": "#/definitions/paginated_snippets"
          }
        },
        "404": {
          "description": "If the user does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create For User",
      "consumes": [
        "application/json"
      ],
      "description": "Identical to `/snippets`, except that the new snippet will be\ncreated under the account specified in the path parameter `{username}`.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The new snippet object.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}",
      "responses": {
        "201": {
          "description": "The newly created snippet object.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created snippet.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        "401": {
          "description": "If the request was not authenticated",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to create snippets under the specified account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes a snippet and returns an empty response.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The snippet's id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}",
      "responses": {
        "204": {
          "description": "If the snippet was deleted successfully."
        },
        "401": {
          "description": "If the snippet is private and the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If authenticated user does not have permission to delete the private snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieves a single snippet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The snippet's id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}",
      "produces": [
        "application/json",
        "multipart/related",
        "multipart/form-data"
      ],
      "responses": {
        "200": {
          "description": "The snippet object.",
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        "401": {
          "description": "If the snippet is private and the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If authenticated user does not have access to the private snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update",
      "consumes": [
        "application/json",
        "multipart/related",
        "multipart/form-data"
      ],
      "description": "Used to update a snippet. Use this to add and delete files and to\nchange a snippet's title.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The snippet's id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}",
      "produces": [
        "application/json",
        "multipart/related",
        "multipart/form-data"
      ],
      "responses": {
        "200": {
          "description": "The updated snippet object.",
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        "401": {
          "description": "If the snippet is private and the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If authenticated user does not have permission to update the private snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Comments",
      "consumes": [
        "application/json"
      ],
      "description": "Used to retrieve a paginated list of all comments for a specific\nsnippet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/comments#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/comments",
      "responses": {
        "200": {
          "description": "A paginated list of snippet comments, ordered by creation date.",
          "schema": {
            "$ref": "#/definitions/paginated_snippet_comments"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/comments#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The contents of the new comment.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/comments",
      "responses": {
        "201": {
          "description": "The newly created comment.",
          "headers": {
            "Location": {
              "description": "The URL of the new comment",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes a snippet comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/comments/%7Bcomment_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/comments/{comment_id}",
      "responses": {
        "204": {
          "description": "Indicates the comment was deleted successfully."
        },
        "403": {
          "description": "If the authenticated user is not the author of the comment.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the comment or the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the specific snippet comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/comments/%7Bcomment_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The specified comment.",
          "schema": {
            "$ref": "#/definitions/snippet_comment"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the comment or snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Comment",
      "consumes": [
        "application/json"
      ],
      "description": "Updates a comment.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/comments/%7Bcomment_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "comment_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/comments/{comment_id}",
      "responses": {
        "200": {
          "description": "The updated comment object."
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the comment or snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Commits",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the changes (commits) made on this snippet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/commits#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/commits",
      "responses": {
        "200": {
          "description": "The paginated list of snippet commits.",
          "schema": {
            "$ref": "#/definitions/paginated_snippet_commit"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Commits For Revision",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/commits/%7Brevision%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/commits/{revision}",
      "responses": {
        "200": {
          "description": "The specified snippet commit.",
          "schema": {
            "$ref": "#/definitions/snippet_commit"
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the commit or the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Raw Files",
      "consumes": [
        "application/json"
      ],
      "description": "Convenience resource for getting to a snippet's raw files without the\nneed for first having to retrieve the snippet itself and having to pull\nout the versioned file links.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/files/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/files/{path}",
      "responses": {
        "302": {
          "description": "A redirect to the most recent revision of the specified file.",
          "headers": {
            "Location": {
              "description": "The URL of the most recent file revision.",
              "type": "string"
            }
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Stop Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Used to stop watching a specific snippet. Returns 204 (No Content)\nto indicate success.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/watch#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The snippet id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/watch",
      "responses": {
        "204": {
          "schema": {
            "$ref": ""
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Check Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Used to check if the current user is watching a specific snippet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/watch#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The snippet id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/watch",
      "responses": {
        "204": {
          "schema": {
            "$ref": ""
          }
        },
        "404": {
          "description": "If the snippet does not exist, or if the authenticated user is not watching the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Start Watch",
      "consumes": [
        "application/json"
      ],
      "description": "Used to start watching a specific snippet. Returns 204 (No Content).",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/watch#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The snippet id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/watch",
      "responses": {
        "204": {
          "schema": {
            "$ref": ""
          }
        },
        "401": {
          "description": "If the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Watchers",
      "consumes": [
        "application/json"
      ],
      "deprecated": true,
      "description": "Returns a paginated list of all users watching a specific snippet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/watchers#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The snippet id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/watchers",
      "responses": {
        "200": {
          "description": "The paginated list of users watching this snippet",
          "schema": {
            "$ref": "#/definitions/paginated_users"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Commit",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the snippet.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/%7Bnode_id%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The snippet's id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/{node_id}",
      "responses": {
        "204": {
          "description": "If the snippet was deleted successfully."
        },
        "401": {
          "description": "If the snippet is private and the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If authenticated user does not have permission to delete the private snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "405": {
          "description": "If `{node_id}` is not the latest revision.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Commit",
      "consumes": [
        "application/json"
      ],
      "description": "Identical to `GET /snippets/encoded_id`, except that this endpoint\ncan be used to retrieve the contents of the snippet as it was at an\nolder revision, while `/snippets/encoded_id` always returns the\nsnippet's current revision.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/%7Bnode_id%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The snippet's id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "A commit revision (SHA1).",
          "in": "path",
          "name": "node_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/{node_id}",
      "produces": [
        "application/json",
        "multipart/related",
        "multipart/form-data"
      ],
      "responses": {
        "200": {
          "description": "The snippet object.",
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        "401": {
          "description": "If the snippet is private and the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If authenticated user does not have access to the private snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet, or the revision does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Commit",
      "consumes": [
        "application/json",
        "multipart/related",
        "multipart/form-data"
      ],
      "description": "Identical to `UPDATE /snippets/encoded_id`, except that this endpoint\ntakes an explicit commit revision. Only the snippet's \"HEAD\"/\"tip\"\n(most recent) version can be updated and requests on all other,\nolder revisions fail by returning a 405 status.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/%7Bnode_id%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The snippet's id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "A commit revision (SHA1).",
          "in": "path",
          "name": "node_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/{node_id}",
      "produces": [
        "application/json",
        "multipart/related",
        "multipart/form-data"
      ],
      "responses": {
        "200": {
          "description": "The updated snippet object.",
          "schema": {
            "$ref": "#/definitions/snippet"
          }
        },
        "401": {
          "description": "If the snippet is private and the request was not authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If authenticated user does not have permission to update the private snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet or the revision does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "405": {
          "description": "If `{node_id}` is not the latest revision.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get File",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieves the raw contents of a specific file in the snippet. The\n`Content-Disposition` header will be \"attachment\" to avoid issues with\nmalevolent executable files.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/%7Bnode_id%7D/files/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "node_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/{node_id}/files/{path}",
      "responses": {
        "200": {
          "description": "Returns the contents of the specified file.",
          "headers": {
            "Content-Disposition": {
              "description": "attachment",
              "type": "string"
            },
            "Content-Type": {
              "description": "The mime type as derived from the filename",
              "type": "string"
            }
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the file or snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Diff",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the diff of the specified commit against its first parent.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/%7Brevision%7D/diff#get",
      "method": "GET",
      "parameters": [
        {
          "description": "When used, only one the diff of the specified file will be returned.",
          "in": "query",
          "name": "path",
          "type": "string"
        },
        {
          "description": "The snippet id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "A revspec expression. This can simply be a commit SHA1, a ref name, or a compare expression like `staging..production`.",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/{revision}/diff",
      "responses": {
        "200": {
          "description": "The raw diff contents."
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Patch",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the patch of the specified commit against its first\nparent.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/%7Brevision%7D/patch#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The snippet id.",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "A revspec expression. This can simply be a commit SHA1, a ref name, or a compare expression like `staging..production`.",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "revision",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/{revision}/patch",
      "responses": {
        "200": {
          "description": "The raw patch contents."
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "snippet": [
    {
      "apiName": "Get Raw Files",
      "consumes": [
        "application/json"
      ],
      "description": "Convenience resource for getting to a snippet's raw files without the\nneed for first having to retrieve the snippet itself and having to pull\nout the versioned file links.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/snippets/%7Busername%7D/%7Bencoded_id%7D/files/%7Bpath%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "path",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "encoded_id",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/snippets/{username}/{encoded_id}/files/{path}",
      "responses": {
        "302": {
          "description": "A redirect to the most recent revision of the specified file.",
          "headers": {
            "Location": {
              "description": "The URL of the most recent file revision.",
              "type": "string"
            }
          }
        },
        "403": {
          "description": "If the authenticated user does not have access to the snippet.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the snippet does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "teams": [
    {
      "apiName": "List",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all the teams that the authenticated user is associated\nwith.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams#get",
      "method": "GET",
      "parameters": [
        {
          "description": " Filters the teams based on the authenticated user's role on each team.",
          "enum": [
            "admin",
            "contributor",
            "member"
          ],
          "in": "query",
          "name": "role",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/teams",
      "responses": {
        "200": {
          "description": "A paginated list of teams.",
          "schema": {
            "$ref": "#/definitions/paginated_teams"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Gets the public information associated with a team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The team's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}",
      "responses": {
        "200": {
          "description": "The team object",
          "schema": {
            "$ref": "#/definitions/team"
          }
        },
        "404": {
          "description": "If no team exists for the specified name or UUID, or if the specified account is a personal account, not a team account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Followers",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the list of accounts that are following this team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/followers#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The team's username",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/followers",
      "responses": {
        "200": {
          "description": "A paginated list of user objects.",
          "schema": {
            "$ref": "#/definitions/paginated_users"
          }
        },
        "404": {
          "description": "If no team exists for the specified name, or if the specified account is a personal account, not a team account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Following",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the list of accounts this team is following.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/following#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The team's username",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/following",
      "responses": {
        "200": {
          "description": "A paginated list of user objects.",
          "schema": {
            "$ref": "#/definitions/paginated_users"
          }
        },
        "404": {
          "description": "If no team exists for the specified name, or if the specified account is a personal account, not a team account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Webhooks",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of webhooks installed on this team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks",
      "responses": {
        "200": {
          "description": "The paginated list of installed webhooks.",
          "schema": {
            "$ref": "#/definitions/paginated_webhook_subscriptions"
          }
        },
        "403": {
          "description": "If the authenticated user is not an admin on the specified team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new webhook on the specified team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks",
      "responses": {
        "201": {
          "description": "The newly installed webhook.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created webhook.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user is not an admin on the specified team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified webhook subscription from the given team\naccount.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks/%7Buid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks/{uid}",
      "responses": {
        "204": {
          "description": "When the webhook was deleted successfully"
        },
        "403": {
          "description": "If the authenticated user does not have permission to delete the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook with the specified id installed on the given\nteam account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks/%7Buid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The installed webhook's id.",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "404": {
          "description": "If the webhook or team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the specified webhook subscription.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/hooks/%7Buid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to update the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or team does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Members",
      "consumes": [
        "application/json"
      ],
      "description": "All members of a team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/members#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/members",
      "responses": {
        "200": {
          "description": "All members",
          "examples": {
            "application/json": {
              "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
              "account_status": "active",
              "display_name": "Example Username",
              "links": {
                "avatar": {
                  "href": "https://bitbucket.org/account/example-username/avatar/"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username"
                }
              },
              "nickname": "example-username",
              "type": "user",
              "username": "example-username",
              "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
            }
          },
          "schema": {
            "$ref": "#/definitions/user"
          }
        },
        "404": {
          "description": "When the team does not exist, or multiple teams with the same name exist that differ only in casing and the URL did not match the exact casing of a particular one.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Team Permissions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns an object for each team permission a user on the team has.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/permissions#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property sort the result by as per [filtering and sorting](../../../meta/filtering#query-sort). ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/permissions",
      "responses": {
        "200": {
          "description": "Repositories owned by a team.",
          "schema": {
            "$ref": "#/definitions/paginated_team_permissions"
          }
        },
        "403": {
          "description": "The requesting user isn't an admin of the team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Repository Permissions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns an object for each repository permission for all of a\nteam’s repositories.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/permissions/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property sort the result by as per [filtering and sorting](../../../../meta/filtering#query-sort). ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/permissions/repositories",
      "responses": {
        "200": {
          "description": "Something something",
          "schema": {
            "$ref": "#/definitions/paginated_repository_permissions"
          }
        },
        "403": {
          "description": "The requesting user isn't an admin of the team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipeline Variables",
      "consumes": [
        "application/json"
      ],
      "description": "Find account level variables.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/#get",
      "method": "GET",
      "operationId": "getPipelineVariablesForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/",
      "responses": {
        "200": {
          "description": "The found account level variables.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_variables"
          }
        }
      }
    },
    {
      "apiName": "Create Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Create an account level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/#post",
      "method": "POST",
      "operationId": "createPipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The variable to create.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/",
      "responses": {
        "201": {
          "description": "The created variable.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline variable.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A variable with the provided key already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Delete a team level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deletePipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to delete.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "204": {
          "description": "The variable was deleted"
        },
        "404": {
          "description": "The account or the variable with the provided UUID does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a team level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to retrieve.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or variable with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Update a team level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#put",
      "method": "PUT",
      "operationId": "updatePipelineVariableForTeam",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated variable.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/teams/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or the variable was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Projects",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/",
      "responses": {
        "200": {
          "description": "A paginated list of projects that belong to the specified team.",
          "schema": {
            "$ref": "#/definitions/paginated_projects"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to read the list of projects for the specified team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A team doesn't exist at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Project",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new project.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/",
      "responses": {
        "201": {
          "description": "A new project has been created.",
          "headers": {
            "Location": {
              "description": "The location of the newly created project",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to create the project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A team doesn't exist at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Project",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/%7Bproject_key%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The project in question. This can either be the actual `key` assigned to the project or the `UUID` (surrounded by curly-braces (`{}`)). ",
          "in": "path",
          "name": "project_key",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/{project_key}",
      "responses": {
        "204": {
          "description": "Successful deletion."
        },
        "403": {
          "description": "The requesting user isn't authorized to delete the project or the project isn't empty.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A project isn't hosted at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Project",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/%7Bproject_key%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The project in question. This can either be the actual `key` assigned to the project or the `UUID` (surrounded by curly-braces (`{}`)). ",
          "in": "path",
          "name": "project_key",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/{project_key}",
      "responses": {
        "200": {
          "description": "The project object.",
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to access the project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A project isn't hosted at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Project",
      "consumes": [
        "application/json"
      ],
      "description": "Since this endpoint can be used to both update and to create a\nproject, the request body depends on the intent.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/%7Bproject_key%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The project in question. This can either be the actual `key` assigned to the project or the `UUID` (surrounded by curly-braces (`{}`)). ",
          "in": "path",
          "name": "project_key",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/{project_key}",
      "responses": {
        "200": {
          "description": "The existing project is has been updated.",
          "headers": {
            "Location": {
              "description": "The location of the project. This header is only provided\nwhen the project key is updated.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "201": {
          "description": "A new project has been created.",
          "headers": {
            "Location": {
              "description": "The location of the newly created project",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to update or create the project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A team doesn't exist at the location. Note that the project's absence from this location doesn't raise a 404, since a PUT at a non-existent location can be used to create a new project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Repositories",
      "consumes": [
        "application/json"
      ],
      "description": "All repositories owned by a user/team. This includes private\nrepositories, but filtered down to the ones that the calling user has\naccess to.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/repositories",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Search Code",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/search/code#get",
      "method": "GET",
      "operationId": "searchAccount",
      "parameters": [
        {
          "description": "The account to search in; either the username or the UUID in curly braces",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The search query",
          "in": "query",
          "name": "search_query",
          "required": true,
          "type": "string"
        },
        {
          "default": 1,
          "description": "Which page of the search results to retrieve",
          "format": "int32",
          "in": "query",
          "name": "page",
          "required": false,
          "type": "integer"
        },
        {
          "default": 10,
          "description": "How many search results to retrieve per page",
          "format": "int32",
          "in": "query",
          "name": "pagelen",
          "required": false,
          "type": "integer"
        }
      ],
      "path": "/teams/{username}/search/code",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "Successful search",
          "schema": {
            "$ref": "#/definitions/search_result_page"
          }
        },
        "400": {
          "description": "If the search request was invalid due to one of the following reasons:\n* the specified type of target account doesn't match the actual account type;\n* malformed pagination properties;\n* missing or malformed search query, in the latter case an error key will be returned in `error.data.key` property.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "Search is not enabled for the requested team, navigate to [https://bitbucket.org/search](https://bitbucket.org/search) to turn it on",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "429": {
          "description": "Too many requests, try again later",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      },
      "summary": "Search for code in the repositories of the specified team"
    },
    {
      "apiName": "Get Members",
      "consumes": [
        "application/json"
      ],
      "description": "All members of a team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/members#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/members",
      "responses": {
        "200": {
          "description": "All members",
          "examples": {
            "application/json": {
              "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
              "account_status": "active",
              "display_name": "Example Username",
              "links": {
                "avatar": {
                  "href": "https://bitbucket.org/account/example-username/avatar/"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username"
                }
              },
              "nickname": "example-username",
              "type": "user",
              "username": "example-username",
              "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
            }
          },
          "schema": {
            "$ref": "#/definitions/user"
          }
        },
        "404": {
          "description": "When the team does not exist, or multiple teams with the same name exist that differ only in casing and the URL did not match the exact casing of a particular one.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Repositories For User",
      "consumes": [
        "application/json"
      ],
      "description": "All repositories owned by a user/team. This includes private\nrepositories, but filtered down to the ones that the calling user has\naccess to.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/repositories",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "projects": [
    {
      "apiName": "List For Team",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/",
      "responses": {
        "200": {
          "description": "A paginated list of projects that belong to the specified team.",
          "schema": {
            "$ref": "#/definitions/paginated_projects"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to read the list of projects for the specified team.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A team doesn't exist at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new project.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/",
      "responses": {
        "201": {
          "description": "A new project has been created.",
          "headers": {
            "Location": {
              "description": "The location of the newly created project",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to create the project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A team doesn't exist at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete For Team",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/%7Bproject_key%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The project in question. This can either be the actual `key` assigned to the project or the `UUID` (surrounded by curly-braces (`{}`)). ",
          "in": "path",
          "name": "project_key",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/{project_key}",
      "responses": {
        "204": {
          "description": "Successful deletion."
        },
        "403": {
          "description": "The requesting user isn't authorized to delete the project or the project isn't empty.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A project isn't hosted at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get For Team",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/%7Bproject_key%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The project in question. This can either be the actual `key` assigned to the project or the `UUID` (surrounded by curly-braces (`{}`)). ",
          "in": "path",
          "name": "project_key",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/{project_key}",
      "responses": {
        "200": {
          "description": "The project object.",
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to access the project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A project isn't hosted at this location.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update For Team",
      "consumes": [
        "application/json"
      ],
      "description": "Since this endpoint can be used to both update and to create a\nproject, the request body depends on the intent.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/projects/%7Bproject_key%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        {
          "description": "This can either be the username or the UUID of the account, surrounded by curly-braces, for example: `{account UUID}`. An account is either a team or user. ",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The project in question. This can either be the actual `key` assigned to the project or the `UUID` (surrounded by curly-braces (`{}`)). ",
          "in": "path",
          "name": "project_key",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/projects/{project_key}",
      "responses": {
        "200": {
          "description": "The existing project is has been updated.",
          "headers": {
            "Location": {
              "description": "The location of the project. This header is only provided\nwhen the project key is updated.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "201": {
          "description": "A new project has been created.",
          "headers": {
            "Location": {
              "description": "The location of the newly created project",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/project"
          }
        },
        "403": {
          "description": "The requesting user isn't authorized to update or create the project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "A team doesn't exist at the location. Note that the project's absence from this location doesn't raise a 404, since a PUT at a non-existent location can be used to create a new project.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "users": [
    {
      "apiName": "List Repositories For Team",
      "consumes": [
        "application/json"
      ],
      "description": "All repositories owned by a user/team. This includes private\nrepositories, but filtered down to the ones that the calling user has\naccess to.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/teams/{username}/repositories",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Authed User",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the currently logged in user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user#get",
      "method": "GET",
      "parameters": [],
      "path": "/user",
      "responses": {
        "200": {
          "description": "The current user.",
          "examples": {
            "application/json": {
              "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
              "account_status": "active",
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "display_name": "Example Username",
              "is_staff": false,
              "links": {
                "avatar": {
                  "href": "https://bitbucket.org/account/example-username/avatar/"
                },
                "followers": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username/followers"
                },
                "following": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username/following"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/"
                },
                "repositories": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username"
                },
                "snippets": {
                  "href": "https://api.bitbucket.org/2.0/snippets/example-username"
                }
              },
              "location": null,
              "nickname": "example-username",
              "type": "user",
              "username": "example-username",
              "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}",
              "website": null
            }
          },
          "schema": {
            "$ref": "#/definitions/user"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Emails For Authed User",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all the authenticated user's email addresses. Both\nconfirmed and unconfirmed.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails#get",
      "method": "GET",
      "parameters": [],
      "path": "/user/emails",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Email For Authed User",
      "consumes": [
        "application/json"
      ],
      "description": "Returns details about a specific one of the authenticated user's\nemail addresses.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails/%7Bemail%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "email",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/user/emails/{email}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Gets the public information associated with a user account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}",
      "responses": {
        "200": {
          "description": "The user object",
          "examples": {
            "application/json": {
              "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
              "display_name": "Example Username",
              "links": {
                "avatar": {
                  "href": "https://bitbucket.org/account/example-username/avatar/"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username"
                }
              },
              "type": "user",
              "username": "example-username",
              "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
            }
          },
          "schema": {
            "$ref": "#/definitions/user"
          }
        },
        "404": {
          "description": "If no user exists for the specified name or UUID, or if the specified account is a team account, not a personal account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Followers",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the list of accounts that are following this team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/followers#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The account's username",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/followers",
      "responses": {
        "200": {
          "description": "A paginated list of user objects.",
          "schema": {
            "$ref": "#/definitions/paginated_users"
          }
        },
        "404": {
          "description": "If no account exists for the specified name, or if the specified account is a team account, not a personal account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Following",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the list of accounts this user is following.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/following#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The user's username",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/following",
      "responses": {
        "200": {
          "description": "A paginated list of user objects.",
          "schema": {
            "$ref": "#/definitions/paginated_users"
          }
        },
        "404": {
          "description": "If no user exists for the specified name, or if the specified account is a team account, not a personal account.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Webhooks",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of webhooks installed on this user account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks",
      "responses": {
        "200": {
          "description": "The paginated list of installed webhooks.",
          "schema": {
            "$ref": "#/definitions/paginated_webhook_subscriptions"
          }
        },
        "403": {
          "description": "If the authenticated user is accessing an account other than their own.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Creates a new webhook on the specified user account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks#post",
      "method": "POST",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks",
      "responses": {
        "201": {
          "description": "The newly installed webhook.",
          "headers": {
            "Location": {
              "description": "The URL of new newly created webhook.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user is accessing an account other than their own.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the specified account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes the specified webhook subscription from the given user\naccount.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks/%7Buid%7D#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks/{uid}",
      "responses": {
        "204": {
          "description": "When the webhook was deleted successfully"
        },
        "403": {
          "description": "If the authenticated user does not have permission to delete the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or user does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the webhook with the specified id installed on the given\nuser account.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks/%7Buid%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The installed webhook's id.",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "404": {
          "description": "If the webhook or user does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Webhook",
      "consumes": [
        "application/json"
      ],
      "description": "Updates the specified webhook subscription.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/hooks/%7Buid%7D#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The installed webhook's id",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "uid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/hooks/{uid}",
      "responses": {
        "200": {
          "description": "The webhook subscription object.",
          "schema": {
            "$ref": "#/definitions/webhook_subscription"
          }
        },
        "403": {
          "description": "If the authenticated user does not have permission to update the webhook.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "If the webhook or user does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Team Members",
      "consumes": [
        "application/json"
      ],
      "description": "All members of a team.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/members#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/members",
      "responses": {
        "200": {
          "description": "All members",
          "examples": {
            "application/json": {
              "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
              "account_status": "active",
              "display_name": "Example Username",
              "links": {
                "avatar": {
                  "href": "https://bitbucket.org/account/example-username/avatar/"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username"
                }
              },
              "nickname": "example-username",
              "type": "user",
              "username": "example-username",
              "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}"
            }
          },
          "schema": {
            "$ref": "#/definitions/user"
          }
        },
        "404": {
          "description": "When the team does not exist, or multiple teams with the same name exist that differ only in casing and the URL did not match the exact casing of a particular one.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Pipeline Variables",
      "consumes": [
        "application/json"
      ],
      "description": "Find user level variables.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/#get",
      "method": "GET",
      "operationId": "getPipelineVariablesForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/",
      "responses": {
        "200": {
          "description": "The found user level variables.",
          "schema": {
            "$ref": "#/definitions/paginated_pipeline_variables"
          }
        }
      }
    },
    {
      "apiName": "Create Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Create a user level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/#post",
      "method": "POST",
      "operationId": "createPipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The variable to create.",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/",
      "responses": {
        "201": {
          "description": "The created variable.",
          "headers": {
            "Location": {
              "description": "The URL of the newly created pipeline variable.",
              "type": "string"
            }
          },
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "409": {
          "description": "A variable with the provided key already exists.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Delete an account level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#delete",
      "method": "DELETE",
      "operationId": "deletePipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to delete.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "204": {
          "description": "The variable was deleted"
        },
        "404": {
          "description": "The account or the variable with the provided UUID does not exist.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Retrieve a user level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#get",
      "method": "GET",
      "operationId": "getPipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable to retrieve.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or variable with the given UUID was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Pipeline Variable",
      "consumes": [
        "application/json"
      ],
      "description": "Update a user level variable.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/pipelines_config/variables/%7Bvariable_uuid%7D#put",
      "method": "PUT",
      "operationId": "updatePipelineVariableForUser",
      "parameters": [
        {
          "description": "The account.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The UUID of the variable.",
          "in": "path",
          "name": "variable_uuid",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated variable.",
          "in": "body",
          "name": "_body",
          "required": true,
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        }
      ],
      "path": "/users/{username}/pipelines_config/variables/{variable_uuid}",
      "responses": {
        "200": {
          "description": "The variable was updated.",
          "schema": {
            "$ref": "#/definitions/pipeline_variable"
          }
        },
        "404": {
          "description": "The account or the variable was not found.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Repositories",
      "consumes": [
        "application/json"
      ],
      "description": "All repositories owned by a user/team. This includes private\nrepositories, but filtered down to the ones that the calling user has\naccess to.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/repositories",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Search Code",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/search/code#get",
      "method": "GET",
      "operationId": "searchAccount",
      "parameters": [
        {
          "description": "The account to search in; either the username or the UUID in curly braces",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The search query",
          "in": "query",
          "name": "search_query",
          "required": true,
          "type": "string"
        },
        {
          "default": 1,
          "description": "Which page of the search results to retrieve",
          "format": "int32",
          "in": "query",
          "name": "page",
          "required": false,
          "type": "integer"
        },
        {
          "default": 10,
          "description": "How many search results to retrieve per page",
          "format": "int32",
          "in": "query",
          "name": "pagelen",
          "required": false,
          "type": "integer"
        }
      ],
      "path": "/users/{username}/search/code",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "Successful search",
          "schema": {
            "$ref": "#/definitions/search_result_page"
          }
        },
        "400": {
          "description": "If the search request was invalid due to one of the following reasons:\n* the specified type of target account doesn't match the actual account type;\n* malformed pagination properties;\n* missing or malformed search query, in the latter case an error key will be returned in `error.data.key` property.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "Search is not enabled for the requested user, navigate to [https://bitbucket.org/search](https://bitbucket.org/search) to turn it on",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "429": {
          "description": "Too many requests, try again later",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      },
      "summary": "Search for code in the repositories of the specified user"
    },
    {
      "apiName": "List Ssh Keys",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the user's SSH public keys.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys",
      "responses": {
        "200": {
          "description": "A list of the SSH keys associated with the account.",
          "schema": {
            "$ref": "#/definitions/paginated_ssh_user_keys"
          }
        },
        "403": {
          "description": "If the specified user's keys are not accessible to the current user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Ssh Key",
      "consumes": [
        "application/json"
      ],
      "description": "Adds a new SSH public key to the specified user account and returns the resulting key.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The new SSH key object",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys",
      "responses": {
        "201": {
          "description": "The newly created SSH key.",
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        "400": {
          "description": "If the submitted key or related value is invalid",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the current user does not have permission to add a key for the specified user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Ssh Key",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes a specific SSH public key from a user's account",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys/#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The SSH key's UUID value.",
          "in": "path",
          "name": "key_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys/{key_id}",
      "responses": {
        "204": {
          "description": "The key has been deleted"
        },
        "403": {
          "description": "If the current user does not have permission to add a key for the specified user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Ssh Key",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a specific SSH public key belonging to a user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys/#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The SSH key's UUID value.",
          "in": "path",
          "name": "key_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys/{key_id}",
      "responses": {
        "200": {
          "description": "The specific SSH key matching the user and UUID",
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        "403": {
          "description": "If the specified user or key is not accessible to the current user"
        },
        "404": {
          "description": "If the specified user or key does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Ssh Key",
      "consumes": [
        "application/json"
      ],
      "description": "Updates a specific SSH public key on a user's account",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys/#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The SSH key's UUID value.",
          "in": "path",
          "name": "key_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated SSH key object",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys/{key_id}",
      "responses": {
        "200": {
          "description": "The newly updated SSH key.",
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        "400": {
          "description": "If the submitted key or related value is invalid",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the current user does not have permission to add a key for the specified user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ],
  "search": [
    {
      "apiName": "Code Of Team",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/teams/%7Busername%7D/search/code#get",
      "method": "GET",
      "operationId": "searchAccount",
      "parameters": [
        {
          "description": "The account to search in; either the username or the UUID in curly braces",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The search query",
          "in": "query",
          "name": "search_query",
          "required": true,
          "type": "string"
        },
        {
          "default": 1,
          "description": "Which page of the search results to retrieve",
          "format": "int32",
          "in": "query",
          "name": "page",
          "required": false,
          "type": "integer"
        },
        {
          "default": 10,
          "description": "How many search results to retrieve per page",
          "format": "int32",
          "in": "query",
          "name": "pagelen",
          "required": false,
          "type": "integer"
        }
      ],
      "path": "/teams/{username}/search/code",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "Successful search",
          "schema": {
            "$ref": "#/definitions/search_result_page"
          }
        },
        "400": {
          "description": "If the search request was invalid due to one of the following reasons:\n* the specified type of target account doesn't match the actual account type;\n* malformed pagination properties;\n* missing or malformed search query, in the latter case an error key will be returned in `error.data.key` property.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "Search is not enabled for the requested team, navigate to [https://bitbucket.org/search](https://bitbucket.org/search) to turn it on",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "429": {
          "description": "Too many requests, try again later",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      },
      "summary": "Search for code in the repositories of the specified team"
    },
    {
      "apiName": "Code Of User",
      "consumes": [
        "application/json"
      ],
      "description": "",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/search/code#get",
      "method": "GET",
      "operationId": "searchAccount",
      "parameters": [
        {
          "description": "The account to search in; either the username or the UUID in curly braces",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The search query",
          "in": "query",
          "name": "search_query",
          "required": true,
          "type": "string"
        },
        {
          "default": 1,
          "description": "Which page of the search results to retrieve",
          "format": "int32",
          "in": "query",
          "name": "page",
          "required": false,
          "type": "integer"
        },
        {
          "default": 10,
          "description": "How many search results to retrieve per page",
          "format": "int32",
          "in": "query",
          "name": "pagelen",
          "required": false,
          "type": "integer"
        }
      ],
      "path": "/users/{username}/search/code",
      "produces": [
        "application/json"
      ],
      "responses": {
        "200": {
          "description": "Successful search",
          "schema": {
            "$ref": "#/definitions/search_result_page"
          }
        },
        "400": {
          "description": "If the search request was invalid due to one of the following reasons:\n* the specified type of target account doesn't match the actual account type;\n* malformed pagination properties;\n* missing or malformed search query, in the latter case an error key will be returned in `error.data.key` property.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "404": {
          "description": "Search is not enabled for the requested user, navigate to [https://bitbucket.org/search](https://bitbucket.org/search) to turn it on",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "429": {
          "description": "Too many requests, try again later",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      },
      "summary": "Search for code in the repositories of the specified user"
    }
  ],
  "user": [
    {
      "apiName": "Get",
      "consumes": [
        "application/json"
      ],
      "description": "Returns the currently logged in user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user#get",
      "method": "GET",
      "parameters": [],
      "path": "/user",
      "responses": {
        "200": {
          "description": "The current user.",
          "examples": {
            "application/json": {
              "account_id": "123456:daffbc08-1a80-4bd0-98bf-7997de0a3d10",
              "account_status": "active",
              "created_on": "2018-06-20T23:17:33.616037+00:00",
              "display_name": "Example Username",
              "is_staff": false,
              "links": {
                "avatar": {
                  "href": "https://bitbucket.org/account/example-username/avatar/"
                },
                "followers": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username/followers"
                },
                "following": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username/following"
                },
                "html": {
                  "href": "https://bitbucket.org/example-username/"
                },
                "repositories": {
                  "href": "https://api.bitbucket.org/2.0/repositories/example-username"
                },
                "self": {
                  "href": "https://api.bitbucket.org/2.0/users/example-username"
                },
                "snippets": {
                  "href": "https://api.bitbucket.org/2.0/snippets/example-username"
                }
              },
              "location": null,
              "nickname": "example-username",
              "type": "user",
              "username": "example-username",
              "uuid": "{58021780-82b6-4517-b153-0ae73ce3e4b4}",
              "website": null
            }
          },
          "schema": {
            "$ref": "#/definitions/user"
          }
        },
        "401": {
          "description": "When the request wasn't authenticated.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Emails",
      "consumes": [
        "application/json"
      ],
      "description": "Returns all the authenticated user's email addresses. Both\nconfirmed and unconfirmed.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails#get",
      "method": "GET",
      "parameters": [],
      "path": "/user/emails",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Email",
      "consumes": [
        "application/json"
      ],
      "description": "Returns details about a specific one of the authenticated user's\nemail addresses.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/emails/%7Bemail%7D#get",
      "method": "GET",
      "parameters": [
        {
          "description": "",
          "in": "path",
          "name": "email",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/user/emails/{email}",
      "responses": {
        "default": {
          "description": "Unexpected error.",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "List Repository Permissions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns an object for each repository the caller has explicit access\nto and their effective permission — the highest level of permission the\ncaller has. This does not return public repositories that the user was\nnot granted any specific permission in, and does not distinguish between\ndirect and indirect privileges.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/permissions/repositories#get",
      "method": "GET",
      "parameters": [
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property sort the result by as per [filtering and sorting](../../../meta/filtering#query-sort). ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/user/permissions/repositories",
      "responses": {
        "200": {
          "description": "Repository permissions for the repositories a caller has explicit access to.",
          "schema": {
            "$ref": "#/definitions/paginated_repository_permissions"
          }
        }
      }
    },
    {
      "apiName": "List Team Permissions",
      "consumes": [
        "application/json"
      ],
      "description": "Returns an object for each team the caller is a member of, and their\neffective role — the highest level of privilege the caller has. If a\nuser is a member of multiple groups with distinct roles, only the\nhighest level is returned.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/user/permissions/teams#get",
      "method": "GET",
      "parameters": [
        {
          "description": " Query string to narrow down the response as per [filtering and sorting](../../../meta/filtering).",
          "in": "query",
          "name": "q",
          "required": false,
          "type": "string"
        },
        {
          "description": " Name of a response property sort the result by as per [filtering and sorting](../../../meta/filtering#query-sort). ",
          "in": "query",
          "name": "sort",
          "required": false,
          "type": "string"
        }
      ],
      "path": "/user/permissions/teams",
      "responses": {
        "200": {
          "description": "Team permissions for the teams a caller is a member of.",
          "schema": {
            "$ref": "#/definitions/paginated_team_permissions"
          }
        }
      }
    }
  ],
  "ssh": [
    {
      "apiName": "List Keys",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a paginated list of the user's SSH public keys.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys",
      "responses": {
        "200": {
          "description": "A list of the SSH keys associated with the account.",
          "schema": {
            "$ref": "#/definitions/paginated_ssh_user_keys"
          }
        },
        "403": {
          "description": "If the specified user's keys are not accessible to the current user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Create Key",
      "consumes": [
        "application/json"
      ],
      "description": "Adds a new SSH public key to the specified user account and returns the resulting key.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys#post",
      "method": "POST",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The new SSH key object",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys",
      "responses": {
        "201": {
          "description": "The newly created SSH key.",
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        "400": {
          "description": "If the submitted key or related value is invalid",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the current user does not have permission to add a key for the specified user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Delete Key",
      "consumes": [
        "application/json"
      ],
      "description": "Deletes a specific SSH public key from a user's account",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys/#delete",
      "method": "DELETE",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The SSH key's UUID value.",
          "in": "path",
          "name": "key_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys/{key_id}",
      "responses": {
        "204": {
          "description": "The key has been deleted"
        },
        "403": {
          "description": "If the current user does not have permission to add a key for the specified user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Get Key",
      "consumes": [
        "application/json"
      ],
      "description": "Returns a specific SSH public key belonging to a user.",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys/#get",
      "method": "GET",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The SSH key's UUID value.",
          "in": "path",
          "name": "key_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys/{key_id}",
      "responses": {
        "200": {
          "description": "The specific SSH key matching the user and UUID",
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        "403": {
          "description": "If the specified user or key is not accessible to the current user"
        },
        "404": {
          "description": "If the specified user or key does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    },
    {
      "apiName": "Update Key",
      "consumes": [
        "application/json"
      ],
      "description": "Updates a specific SSH public key on a user's account",
      "documentationUrl": "https://developer.atlassian.com/bitbucket/api/2/reference/resource/users/%7Busername%7D/ssh-keys/#put",
      "method": "PUT",
      "parameters": [
        {
          "description": "The account's username or UUID.",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        },
        {
          "description": "The SSH key's UUID value.",
          "in": "path",
          "name": "key_id",
          "required": true,
          "type": "string"
        },
        {
          "description": "The updated SSH key object",
          "in": "body",
          "name": "_body",
          "required": false,
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        {
          "description": "",
          "in": "path",
          "name": "username",
          "required": true,
          "type": "string"
        }
      ],
      "path": "/users/{username}/ssh-keys/{key_id}",
      "responses": {
        "200": {
          "description": "The newly updated SSH key.",
          "schema": {
            "$ref": "#/definitions/ssh_account_key"
          }
        },
        "400": {
          "description": "If the submitted key or related value is invalid",
          "schema": {
            "$ref": "#/definitions/error"
          }
        },
        "403": {
          "description": "If the current user does not have permission to add a key for the specified user"
        },
        "404": {
          "description": "If the specified user does not exist",
          "schema": {
            "$ref": "#/definitions/error"
          }
        }
      }
    }
  ]
}
