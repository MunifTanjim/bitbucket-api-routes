[
  {
    "description": "",
    "name": "users"
  },
  {
    "description": "",
    "name": "teams"
  },
  {
    "description": "",
    "name": "repositories"
  },
  {
    "description": "Browse the source code in the repository and\n                              create new commits by uploading.",
    "name": "source"
  },
  {
    "description": "",
    "name": "refs"
  },
  {
    "description": "",
    "name": "commits"
  },
  {
    "description": "",
    "name": "pullrequests"
  },
  {
    "description": "The issue resources provide functionality for getting information on\nissues in an issue tracker, creating new issues, updating them and deleting\nthem.\n\nYou can access public issues without authentication, but you can't gain access\nto private repositories' issues. By authenticating, you will get the ability\nto create issues, as well as access to updating data or deleting issues you\nhave access to.",
    "name": "issue_tracker"
  },
  {
    "description": "",
    "name": "wiki"
  },
  {
    "description": "",
    "name": "downloads"
  },
  {
    "description": "",
    "name": "snippets"
  },
  {
    "description": "Webhooks provide a way to configure Bitbucket Cloud to make requests to\nyour server (or another external service) whenever certain events occur in\nBitbucket Cloud.\n\nA webhook consists of:\n\n* A subject -- The resource that generates the events. Currently, this resource\n  is the repository, user account, or team where you create the webhook.\n* One or more event -- The default event is a repository push, but you can\n  select multiple events that can trigger the webhook.\n* A URL -- The endpoint where you want Bitbucket to send the event payloads\n  when a matching event happens.\n\nThere are two parts to getting a webhook to work: creating the webhook and\ntriggering the webhook. After you create a webhook for an event, every time\nthat event occurs, Bitbucket sends a payload request that describes the event\nto the specified URL. Thus, you can think of webhooks as a kind of\nnotification system.\n\nUse webhooks to integrate applications with Bitbucket Cloud. The following\nuse cases provides examples of when you would want to use webhooks:\n\n* Every time a user pushes commits in a repository, you may want to notify\n  your CI server to start a build.\n* Every time a user pushes commits or creates a pull request, you may want to\n  display a notification in your application.\n",
    "name": "webhooks"
  },
  {
    "description": "Commit statuses provide a way to tag commits with meta data,\nlike automated build results.\n",
    "name": "commitstatuses"
  },
  {
    "description": "Repository owners and administrators can set branch management\nrules on a repository that control what can be pushed by whom.\nThrough these rules, you can enforce a project or team\nworkflow. For example, owners or administrators can:\n\n* Limit push powers\n* Prevent branch (bookmark) deletion\n* Prevent history re-writes (Git only)\n",
    "name": "branchrestrictions"
  },
  {
    "description": "Bitbucket Cloud projects make it easier for teams to focus on\na goal, product, or process by organizing their repositories.\n",
    "name": "projects"
  },
  {
    "description": "Bitbucket Pipelines brings continuous delivery to Bitbucket\nCloud, empowering teams with full branching to deployment\nvisibility and faster feedback loops.\n",
    "name": "pipelines"
  },
  {
    "description": "Teams are deploying code faster than ever, thanks to continuous\ndelivery practices and tools like Bitbucket Pipelines. Bitbucket\nDeployments gives teams visibility into their deployment\nenvironments and helps teams to track how far changes have\nprogressed in their deployment pipeline.\n",
    "name": "deployments"
  }
]
